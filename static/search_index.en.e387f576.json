[{"id":0,"title":"Declaration Generator","content":"#\n\nThe Declaration Generator module is responsible for creating and managing the\nTypeScript declaration files required for auto-import functionality. It provides\nfunctions to generate placeholder declaration files that will be automatically\nupdated by the auto-import plugins during development.\n\n\nAPI Reference#\n\n\ngenerateDeclarationFiles#\n\nSignature:\n\n\n\nParameters:\n\n * options: GenerateDeclarationFilesOptions - Configuration options for\n   declaration file generation\n   * path?: string - The path to the project directory (defaults to current\n     directory)\n\nReturns:\n\n * Promise<GenerateDeclarationFilesResult> - A promise that resolves to the\n   generation result\n   * success: boolean - Whether the generation was successful\n   * componentsDeclarationPath: string - The path to the components declaration\n     file\n   * autoImportsDeclarationPath: string - The path to the auto-imports\n     declaration file\n   * filesCreated: boolean - Whether new files were created or existing files\n     were preserved\n\nExample:\n\n\n\n\nImplementation Details#\n\nThe Declaration Generator performs the following operations:\n\n 1. File Path Resolution\n    \n    * Determines the paths for the declaration files\n    * By default, creates files in the project root directory\n\n 2. File Existence Check\n    \n    * Checks if declaration files already exist\n    * Preserves existing files to avoid overwriting user modifications\n\n 3. Template Generation\n    \n    * Creates placeholder declaration files with minimal content\n    * These files will be automatically updated by the plugins during\n      development\n\n\nDeclaration File Templates#\n\nThe module generates two declaration files:\n\n\ncomponents.d.ts#\n\n\n\n\nauto-imports.d.ts#\n\n\n\n\nSource Code Analysis#\n\nThe Declaration Generator uses the file system to create declaration files. It\nfollows these steps:\n\n 1. Determine the paths for the declaration files\n 2. Check if the files already exist\n 3. If they don't exist, create them with placeholder content\n 4. Return the paths and creation status\n\n\n\n\nError Handling#\n\nThe Declaration Generator includes robust error handling to provide clear\nfeedback when issues are encountered:\n\n * File system access errors\n * Permission issues when creating files\n * Path resolution errors\n\nThese errors are propagated to the caller with descriptive messages to help\nusers troubleshoot issues.\n\n\nRelated Modules#\n\n * TypeScript Config Manager - Updates the TypeScript configuration to include\n   the declaration files\n * Vite Config Manager - Configures the plugins that will update the declaration\n   files","routePath":"/ew-auto-import-tool/en/api/declaration-generator","lang":"en","toc":[{"text":"API Reference","id":"api-reference","depth":2,"charIndex":297},{"text":"`generateDeclarationFiles`","id":"generatedeclarationfiles","depth":3,"charIndex":-1},{"text":"Implementation Details","id":"implementation-details","depth":2,"charIndex":1028},{"text":"Declaration File Templates","id":"declaration-file-templates","depth":2,"charIndex":1595},{"text":"components.d.ts","id":"componentsdts","depth":3,"charIndex":1670},{"text":"auto-imports.d.ts","id":"auto-importsdts","depth":3,"charIndex":1691},{"text":"Source Code Analysis","id":"source-code-analysis","depth":2,"charIndex":1714},{"text":"Error Handling","id":"error-handling","depth":2,"charIndex":2032},{"text":"Related Modules","id":"related-modules","depth":2,"charIndex":2364}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Dependency Manager","content":"#\n\nThe Dependency Manager module is responsible for installing and managing the\ndependencies required for auto-import functionality. It provides functions to\ndetect the package manager used in the project and install the necessary\npackages.\n\n\nAPI Reference#\n\n\ninstallDependencies#\n\nSignature:\n\n\n\nParameters:\n\n * options: InstallDependenciesOptions - Configuration options for dependency\n   installation\n   * path?: string - The path to the project directory (defaults to current\n     directory)\n   * library: string - The component library to install\n   * packageManager?: 'npm' | 'yarn' | 'pnpm' - The package manager to use\n     (auto-detected if not specified)\n\nReturns:\n\n * Promise<InstallDependenciesResult> - A promise that resolves to the\n   installation result\n   * success: boolean - Whether the installation was successful\n   * packageManager: 'npm' | 'yarn' | 'pnpm' - The package manager used\n   * installedPackages: string[] - The list of installed packages\n\nExample:\n\n\n\n\nImplementation Details#\n\nThe Dependency Manager performs the following operations:\n\n 1. Package Manager Detection\n    \n    * Detects whether the project uses npm, yarn, or pnpm based on lock files\n    * Falls back to npm if no package manager is detected\n\n 2. Dependency Resolution\n    \n    * Determines the required packages based on the selected component library\n    * Always includes core packages: unplugin-auto-import,\n      unplugin-vue-components\n    * Adds library-specific packages (e.g., element-plus for Element Plus)\n\n 3. Installation Process\n    \n    * Executes the appropriate install command based on the detected package\n      manager\n    * Handles installation errors and provides detailed feedback\n\n\nPackage Manager Commands#\n\nThe module uses different commands depending on the detected package manager:\n\nPACKAGE MANAGER   INSTALL COMMAND\nnpm               npm install --save-dev <packages>\nyarn              yarn add --dev <packages>\npnpm              pnpm add --save-dev <packages>\n\nFor component libraries, the module uses the standard installation command\nwithout the --save-dev flag, as these are runtime dependencies.\n\n\nSource Code Analysis#\n\nThe Dependency Manager uses Node.js child process execution to run package\nmanager commands. It follows these steps:\n\n 1. Detect or use the specified package manager\n 2. Determine the packages to install based on the library\n 3. Execute the installation commands\n 4. Parse the output to determine success or failure\n\n\n\n\nError Handling#\n\nThe Dependency Manager includes robust error handling to provide clear feedback\nwhen issues are encountered:\n\n * Package manager detection errors\n * Network connectivity issues\n * Package resolution failures\n * Installation process errors\n\nThese errors are propagated to the caller with descriptive messages to help\nusers troubleshoot issues.\n\n\nRelated Modules#\n\n * Project Checker - Provides package manager detection used by the Dependency\n   Manager\n * Vite Config Manager - Uses the installed packages to configure Vite","routePath":"/ew-auto-import-tool/en/api/dependency-manager","lang":"en","toc":[{"text":"API Reference","id":"api-reference","depth":2,"charIndex":242},{"text":"`installDependencies`","id":"installdependencies","depth":3,"charIndex":-1},{"text":"Implementation Details","id":"implementation-details","depth":2,"charIndex":984},{"text":"Package Manager Commands","id":"package-manager-commands","depth":2,"charIndex":1703},{"text":"Source Code Analysis","id":"source-code-analysis","depth":2,"charIndex":2130},{"text":"Error Handling","id":"error-handling","depth":2,"charIndex":2473},{"text":"Related Modules","id":"related-modules","depth":2,"charIndex":2835}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Core API","content":"#\n\new-auto-import-tool provides a series of core APIs that can be used\nprogrammatically in your projects. Below are the main API functions and their\nusage.\n\n\nconfigureAutoImport#\n\nThe main function for executing the entire auto-import configuration process.\n\n\nFunction Signature#\n\n\n\n\nParameters#\n\n * library: The component library to configure, type Library (string literal\n   type)\n * projectPath: Project path, defaults to the current working directory\n\n\nReturn Value#\n\n * Promise<boolean>: Promise indicating whether the configuration was successful\n\n\nExample#\n\n\n\n\nModule APIs#\n\nIn addition to the main function, ew-auto-import-tool also provides several\nmodule APIs that can be used independently:\n\n * Project Checker - Check project type and structure\n * Dependency Manager - Manage project dependencies\n * Vite Config Manager - Update Vite configuration\n * TypeScript Config Manager - Update TypeScript configuration\n * Declaration Generator - Generate declaration files\n\nThese modules can be imported and used separately according to your needs.","routePath":"/ew-auto-import-tool/en/api/","lang":"en","toc":[{"text":"configureAutoImport","id":"configureautoimport","depth":2,"charIndex":157},{"text":"Function Signature","id":"function-signature","depth":3,"charIndex":259},{"text":"Parameters","id":"parameters","depth":3,"charIndex":283},{"text":"Return Value","id":"return-value","depth":3,"charIndex":456},{"text":"Example","id":"example","depth":3,"charIndex":554},{"text":"Module APIs","id":"module-apis","depth":2,"charIndex":567}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"Project Checker","content":"#\n\nThe Project Checker module is responsible for analyzing the project structure\nand verifying compatibility with the selected component library. It provides\nfunctions to check if the current directory contains a valid Vue project and to\nidentify the project's configuration files.\n\n\nAPI Reference#\n\n\ncheckProject#\n\nSignature:\n\n\n\nParameters:\n\n * options: CheckProjectOptions - Configuration options for project checking\n   * path?: string - The path to the project directory (defaults to current\n     directory)\n   * library?: string - The component library to check compatibility with\n\nReturns:\n\n * Promise<CheckProjectResult> - A promise that resolves to the check result\n   * isVueProject: boolean - Whether the directory contains a Vue project\n   * hasViteConfig: boolean - Whether the project has a Vite configuration file\n   * hasTsConfig: boolean - Whether the project has a TypeScript configuration\n     file\n   * viteConfigPath?: string - The path to the Vite configuration file (if\n     found)\n   * tsConfigPath?: string - The path to the TypeScript configuration file (if\n     found)\n   * packageManager: 'npm' | 'yarn' | 'pnpm' - The detected package manager\n\nExample:\n\n\n\n\nImplementation Details#\n\nThe Project Checker performs the following checks:\n\n 1. Vue Project Detection\n    \n    * Checks for the presence of vue in package.json dependencies\n    * Verifies the existence of key Vue project files\n\n 2. Configuration File Detection\n    \n    * Searches for Vite configuration files (vite.config.js/ts)\n    * Searches for TypeScript configuration files (tsconfig.json)\n\n 3. Package Manager Detection\n    \n    * Detects whether the project uses npm, yarn, or pnpm based on lock files\n\n\nSource Code Analysis#\n\nThe Project Checker uses the fs-extra library to check for file existence and\nread package.json. It follows these steps:\n\n 1. Check if the specified path exists and is a directory\n 2. Read and parse the package.json file to verify Vue dependency\n 3. Look for configuration files using pattern matching\n 4. Determine the package manager by checking for lock files\n\n\n\n\nError Handling#\n\nThe Project Checker includes robust error handling to provide clear feedback\nwhen issues are encountered:\n\n * Invalid project path errors\n * Package.json parsing errors\n * Missing required dependencies\n\nThese errors are propagated to the caller with descriptive messages to help\nusers troubleshoot issues.\n\n\nRelated Modules#\n\n * Dependency Manager - Uses Project Checker results to install required\n   dependencies\n * Vite Config Manager - Uses the detected Vite configuration path\n * TypeScript Config Manager - Uses the detected TypeScript configuration path","routePath":"/ew-auto-import-tool/en/api/project-checker","lang":"en","toc":[{"text":"API Reference","id":"api-reference","depth":2,"charIndex":283},{"text":"`checkProject`","id":"checkproject","depth":3,"charIndex":-1},{"text":"Implementation Details","id":"implementation-details","depth":2,"charIndex":1184},{"text":"Source Code Analysis","id":"source-code-analysis","depth":2,"charIndex":1697},{"text":"Error Handling","id":"error-handling","depth":2,"charIndex":2087},{"text":"Related Modules","id":"related-modules","depth":2,"charIndex":2412}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"TypeScript Config Manager","content":"#\n\nThe tsConfigManager module is responsible for updating the project's TypeScript\nconfiguration file, adding declaration files for auto-imported components and\nAPIs to the include configuration, ensuring that TypeScript correctly recognizes\nthese types.\n\n\nAPI Reference#\n\n\nupdateTsConfig#\n\n\n\nParameters#\n\n * projectPath: string - Path to the project root directory\n\nReturn Value#\n\n * Promise<void> - Asynchronous operation, no return value on success\n\nExceptions#\n\n * Throws an error when updating TypeScript configuration fails\n\nUsage Example#\n\n\n\n\nImplementation Details#\n\nThe updateTsConfig function performs the following steps:\n\n 1. Check Configuration File Existence: Verify if the tsconfig.json file exists\n    in the project, skip configuration if it doesn't exist\n\n 2. Read Existing Configuration: Read the contents of the tsconfig.json file\n\n 3. Check Include Configuration: If the include field doesn't exist in the\n    configuration, create an empty array\n\n 4. Add Declaration File References: Add components.d.ts and auto-imports.d.ts\n    to the include array (if not already included)\n\n 5. Write Updated Configuration: If there are changes, write the updated\n    configuration back to the tsconfig.json file\n\n\nDeclaration Files Description#\n\nThe two declaration files added by the module serve the following purposes:\n\n * components.d.ts - Contains type declarations for all components in the\n   component library, allowing TypeScript to recognize components used in\n   templates\n * auto-imports.d.ts - Contains type declarations for all auto-imported APIs\n   from the component library, allowing TypeScript to recognize globally\n   available APIs\n\nThese files are typically automatically generated and updated by the\nunplugin-auto-import and unplugin-vue-components plugins when the project is\nfirst started.\n\n\nConfiguration Example#\n\ntsconfig.json before update:\n\n\n\ntsconfig.json after update:\n\n\n\n\nSource Code Analysis#\n\nThe tsConfigManager module uses the fs-extra library to read and write JSON\nfiles, which simplifies the process of handling configuration files:\n\n\n\n\nNotes#\n\n * The function automatically detects and skips configurations that already\n   include the required declaration files\n * If the tsconfig.json file doesn't exist in the project, the function will\n   skip configuration without reporting an error\n * The function only modifies the include field and doesn't change other\n   TypeScript configurations","routePath":"/ew-auto-import-tool/en/api/ts-config-manager","lang":"en","toc":[{"text":"API Reference","id":"api-reference","depth":2,"charIndex":256},{"text":"updateTsConfig","id":"updatetsconfig","depth":3,"charIndex":273},{"text":"Parameters","id":"parameters","depth":4,"charIndex":292},{"text":"Return Value","id":"return-value","depth":4,"charIndex":366},{"text":"Exceptions","id":"exceptions","depth":4,"charIndex":452},{"text":"Usage Example","id":"usage-example","depth":4,"charIndex":530},{"text":"Implementation Details","id":"implementation-details","depth":2,"charIndex":549},{"text":"Declaration Files Description","id":"declaration-files-description","depth":2,"charIndex":1223},{"text":"Configuration Example","id":"configuration-example","depth":2,"charIndex":1825},{"text":"Source Code Analysis","id":"source-code-analysis","depth":2,"charIndex":1913},{"text":"Notes","id":"notes","depth":2,"charIndex":2085}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"Vite Config Manager","content":"#\n\nThe Vite Config Manager module is responsible for updating the Vite\nconfiguration file to include the auto-import plugins. It provides functions to\nlocate, parse, and modify the Vite configuration file to enable automatic\ncomponent and API imports.\n\n\nAPI Reference#\n\n\nupdateViteConfig#\n\nSignature:\n\n\n\nParameters:\n\n * options: UpdateViteConfigOptions - Configuration options for Vite config\n   update\n   * path?: string - The path to the project directory (defaults to current\n     directory)\n   * library: string - The component library to configure\n   * viteConfigPath?: string - The path to the Vite configuration file\n     (auto-detected if not specified)\n\nReturns:\n\n * Promise<UpdateViteConfigResult> - A promise that resolves to the update\n   result\n   * success: boolean - Whether the update was successful\n   * viteConfigPath: string - The path to the updated Vite configuration file\n   * configUpdated: boolean - Whether the configuration was actually modified\n\nExample:\n\n\n\n\nImplementation Details#\n\nThe Vite Config Manager performs the following operations:\n\n 1. Configuration File Detection\n    \n    * Locates the Vite configuration file (vite.config.js/ts)\n    * Supports both JavaScript and TypeScript configuration files\n\n 2. AST Parsing and Transformation\n    \n    * Parses the configuration file into an Abstract Syntax Tree (AST)\n    * Analyzes the existing configuration to avoid duplicate plugins\n    * Adds the necessary import statements for auto-import plugins\n    * Adds plugin configurations with appropriate resolvers\n\n 3. Code Generation\n    \n    * Transforms the modified AST back to code\n    * Preserves formatting and comments as much as possible\n    * Writes the updated configuration back to the file\n\n\nLibrary-Specific Configurations#\n\nThe module adds different resolver configurations based on the selected\ncomponent library:\n\n\nElement Plus#\n\n\n\n\nAnt Design Vue#\n\n\n\n\nSource Code Analysis#\n\nThe Vite Config Manager uses AST manipulation libraries to modify the\nconfiguration file. It follows these steps:\n\n 1. Read the Vite configuration file\n 2. Parse it into an AST using a parser like Babel or TypeScript\n 3. Traverse the AST to find the plugins array\n 4. Check if auto-import plugins are already configured\n 5. Add the necessary import statements and plugin configurations\n 6. Generate code from the modified AST\n 7. Write the updated code back to the file\n\n\n\n\nError Handling#\n\nThe Vite Config Manager includes robust error handling to provide clear feedback\nwhen issues are encountered:\n\n * Configuration file not found errors\n * Parsing errors for malformed configuration files\n * AST traversal and manipulation errors\n * File writing errors\n\nThese errors are propagated to the caller with descriptive messages to help\nusers troubleshoot issues.\n\n\nRelated Modules#\n\n * Project Checker - Provides Vite configuration file detection\n * Dependency Manager - Installs the dependencies required by the Vite plugins\n * Declaration Generator - Creates declaration files referenced by the Vite\n   plugins","routePath":"/ew-auto-import-tool/en/api/vite-config-manager","lang":"en","toc":[{"text":"API Reference","id":"api-reference","depth":2,"charIndex":253},{"text":"`updateViteConfig`","id":"updateviteconfig","depth":3,"charIndex":-1},{"text":"Implementation Details","id":"implementation-details","depth":2,"charIndex":985},{"text":"Library-Specific Configurations","id":"library-specific-configurations","depth":2,"charIndex":1735},{"text":"Element Plus","id":"element-plus","depth":3,"charIndex":1862},{"text":"Ant Design Vue","id":"ant-design-vue","depth":3,"charIndex":1880},{"text":"Source Code Analysis","id":"source-code-analysis","depth":2,"charIndex":1900},{"text":"Error Handling","id":"error-handling","depth":2,"charIndex":2397},{"text":"Related Modules","id":"related-modules","depth":2,"charIndex":2786}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Basic Examples","content":"#\n\nThis page provides basic usage examples of ew-auto-import-tool to help you\nquickly understand how to use the tool and its effects.\n\n\nBefore Using#\n\nBefore using the auto-import tool, you need to manually import each component,\nwhich leads to verbose code that is difficult to maintain.\n\n\nApp.vue (Before)#\n\n\n\n\nvite.config.ts (Before)#\n\n\n\n\nAfter Using#\n\nAfter using ew-auto-import-tool, components and APIs are automatically imported,\nmaking the code cleaner and more maintainable.\n\n\nApp.vue (After)#\n\n\n\n\nvite.config.ts (After)#\n\n\n\n\nProject Structure Comparison#\n\nFor a detailed comparison of project structures before and after using\new-auto-import-tool, see the Project Structure page.","routePath":"/ew-auto-import-tool/en/examples/","lang":"en","toc":[{"text":"Before Using","id":"before-using","depth":2,"charIndex":135},{"text":"App.vue (Before)","id":"appvue-before","depth":3,"charIndex":290},{"text":"vite.config.ts (Before)","id":"viteconfigts-before","depth":3,"charIndex":312},{"text":"After Using","id":"after-using","depth":2,"charIndex":341},{"text":"App.vue (After)","id":"appvue-after","depth":3,"charIndex":485},{"text":"vite.config.ts (After)","id":"viteconfigts-after","depth":3,"charIndex":506},{"text":"Project Structure Comparison","id":"project-structure-comparison","depth":2,"charIndex":534}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"Project Structure Comparison","content":"#\n\nThis page compares the project structure before and after using\new-auto-import-tool, showing how the tool modifies your project configuration.\n\n\nBefore Using ew-auto-import-tool#\n\nA typical Vue 3 + Vite project structure before using the tool:\n\n\n\n\nvite.config.ts (Before)#\n\n\n\n\ntsconfig.json (Before)#\n\n\n\n\npackage.json (Before)#\n\n\n\n\nAfter Using ew-auto-import-tool#\n\nAfter running ew-auto-import-tool with Element Plus, the project structure\nchanges:\n\n\n\n\nvite.config.ts (After)#\n\n\n\n\ntsconfig.json (After)#\n\n\n\n\npackage.json (After)#\n\n\n\n\nauto-imports.d.ts (New File)#\n\n\n\n\ncomponents.d.ts (New File)#\n\n\n\n\nKey Differences#\n\n 1. New Files:\n    \n    * auto-imports.d.ts - Type declarations for auto-imported APIs\n    * components.d.ts - Type declarations for auto-imported components\n\n 2. Updated Files:\n    \n    * vite.config.ts - Added auto-import plugins and resolvers\n    * tsconfig.json - Added declaration files to include array\n    * package.json - Added new dependencies\n\n 3. Development Experience:\n    \n    * Before: Manual imports required for each component\n    * After: Components and APIs are automatically imported\n\nThese changes significantly improve the development experience by reducing\nboilerplate code and allowing you to focus on building your application rather\nthan managing imports.","routePath":"/ew-auto-import-tool/en/examples/project-structure","lang":"en","toc":[{"text":"Before Using ew-auto-import-tool","id":"before-using-ew-auto-import-tool","depth":2,"charIndex":147},{"text":"vite.config.ts (Before)","id":"viteconfigts-before","depth":3,"charIndex":250},{"text":"tsconfig.json (Before)","id":"tsconfigjson-before","depth":3,"charIndex":279},{"text":"package.json (Before)","id":"packagejson-before","depth":3,"charIndex":307},{"text":"After Using ew-auto-import-tool","id":"after-using-ew-auto-import-tool","depth":2,"charIndex":334},{"text":"vite.config.ts (After)","id":"viteconfigts-after","depth":3,"charIndex":456},{"text":"tsconfig.json (After)","id":"tsconfigjson-after","depth":3,"charIndex":484},{"text":"package.json (After)","id":"packagejson-after","depth":3,"charIndex":511},{"text":"auto-imports.d.ts (New File)","id":"auto-importsdts-new-file","depth":3,"charIndex":537},{"text":"components.d.ts (New File)","id":"componentsdts-new-file","depth":3,"charIndex":571},{"text":"Key Differences","id":"key-differences","depth":2,"charIndex":603}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"Getting Started","content":"#\n\n\nInstallation#\n\n\nGlobal Installation#\n\n\n\nOr using yarn:\n\n\n\nOr using pnpm:\n\n\n\n\nUsing npx Directly#\n\nYou can also run it directly without installation using npx:\n\n\n\n\nBasic Usage#\n\nRun the following command in the root directory of your Vue project:\n\n\n\nThe tool will guide you to select a component library and automatically complete\nthe configuration.\n\n\nSpecify Component Library#\n\nYou can specify the component library to configure via command line parameters:\n\n\n\n\nSpecify Project Path#\n\nBy default, the tool looks for a Vue project in the current directory. You can\nalso specify the project path:\n\n\n\n\nView Help#\n\n\n\n\nAfter Configuration#\n\nAfter the configuration is complete, you need to:\n\n 1. Restart the development server\n 2. Use components directly in your components without manual imports\n\nFor example:\n\n\n\n\nNext Steps#\n\n * Usage - Learn more usage options and examples\n * Supported Libraries - View details of supported component libraries\n * Implementation - Understand the implementation principles of the tool","routePath":"/ew-auto-import-tool/en/guide/getting-started","lang":"en","toc":[{"text":"Installation","id":"installation","depth":2,"charIndex":3},{"text":"Global Installation","id":"global-installation","depth":3,"charIndex":19},{"text":"Using npx Directly","id":"using-npx-directly","depth":3,"charIndex":80},{"text":"Basic Usage","id":"basic-usage","depth":2,"charIndex":166},{"text":"Specify Component Library","id":"specify-component-library","depth":2,"charIndex":354},{"text":"Specify Project Path","id":"specify-project-path","depth":2,"charIndex":466},{"text":"View Help","id":"view-help","depth":2,"charIndex":603},{"text":"After Configuration","id":"after-configuration","depth":2,"charIndex":618},{"text":"Next Steps","id":"next-steps","depth":2,"charIndex":814}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"Implementation","content":"#\n\nThis page explains the implementation principles of ew-auto-import-tool and how\nit works under the hood.\n\n\nArchitecture#\n\new-auto-import-tool is designed with a modular architecture, consisting of\nseveral core modules that work together to automate the configuration process:\n\n 1. Project Checker - Analyzes the project structure and verifies compatibility\n 2. Dependency Manager - Handles the installation of required packages\n 3. Vite Config Manager - Updates the Vite configuration file\n 4. TypeScript Config Manager - Updates the TypeScript configuration file\n 5. Declaration Generator - Generates type declaration files\n\n\nWorkflow#\n\nWhen you run ew-auto-import-tool, it follows this workflow:\n\n 1. Project Analysis\n    \n    * Checks if the current directory contains a Vue project\n    * Identifies the project structure and configuration files\n    * Verifies compatibility with the selected component library\n\n 2. Dependency Installation\n    \n    * Detects the package manager (npm, yarn, or pnpm)\n    * Installs the required dependencies:\n      * The selected component library\n      * unplugin-auto-import\n      * unplugin-vue-components\n\n 3. Vite Configuration Update\n    \n    * Locates the Vite configuration file (vite.config.ts/js)\n    * Adds the necessary plugins with appropriate resolvers\n    * Preserves existing configuration\n\n 4. TypeScript Configuration Update\n    \n    * Locates the TypeScript configuration file (tsconfig.json)\n    * Adds declaration files to the include array\n    * Preserves existing configuration\n\n 5. Declaration File Generation\n    \n    * Creates placeholder declaration files if they don't exist\n    * These files will be automatically updated by the plugins when the project\n      runs\n\n\nTechnical Details#\n\n\nAuto Import Mechanism#\n\nThe auto-import functionality is powered by two key plugins:\n\n 1. unplugin-vue-components\n    \n    * Automatically imports components used in templates\n    * Generates component declaration files for TypeScript\n\n 2. unplugin-auto-import\n    \n    * Automatically imports APIs (like ref, reactive) used in script sections\n    * Generates API declaration files for TypeScript\n\nThese plugins work by analyzing your code during the build process and\nautomatically adding the necessary import statements.\n\n\nResolver Configuration#\n\nEach component library requires a specific resolver configuration. For example,\nfor Element Plus:\n\n\n\nThe resolver tells the plugins which components and APIs to look for and how to\nimport them.\n\n\nDeclaration Files#\n\nTwo declaration files are generated:\n\n 1. components.d.ts - Contains type definitions for all auto-imported components\n 2. auto-imports.d.ts - Contains type definitions for all auto-imported APIs\n\nThese files ensure that TypeScript recognizes the auto-imported components and\nAPIs, providing proper type checking and IntelliSense in your IDE.\n\n\nCode Structure#\n\nThe tool's source code is organized as follows:\n\n\n\nEach module is designed to be independent and reusable, allowing for easy\nmaintenance and extension.","routePath":"/ew-auto-import-tool/en/guide/implementation","lang":"en","toc":[{"text":"Architecture","id":"architecture","depth":2,"charIndex":109},{"text":"Workflow","id":"workflow","depth":2,"charIndex":629},{"text":"Technical Details","id":"technical-details","depth":2,"charIndex":1734},{"text":"Auto Import Mechanism","id":"auto-import-mechanism","depth":3,"charIndex":1755},{"text":"Resolver Configuration","id":"resolver-configuration","depth":3,"charIndex":2280},{"text":"Declaration Files","id":"declaration-files","depth":3,"charIndex":2501},{"text":"Code Structure","id":"code-structure","depth":2,"charIndex":2866}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"Introduction","content":"#\n\n\nWhat is ew-auto-import-tool?#\n\new-auto-import-tool is a command-line tool for automatically configuring\non-demand imports of component libraries in Vue projects. It helps developers\nquickly set up popular component libraries such as Element Plus, Ant Design Vue,\netc., without manually modifying configuration files.\n\n\nWhy do we need this tool?#\n\nWhen using component libraries in Vue projects, it's common to configure\non-demand imports to optimize performance. This involves several steps:\n\n 1. Installing necessary dependencies\n 2. Configuring Vite plugins\n 3. Updating TypeScript configuration\n 4. Generating declaration files\n\nThese steps, while not complex, are tedious and prone to errors. The\new-auto-import-tool automates these configurations, allowing developers to focus\non developing business logic.\n\n\nTool Features#\n\n * Dependency Management: Automatically detect and install required dependencies\n * Vite Configuration: Automatically add necessary import statements and plugin\n   configurations\n * TypeScript Support: Automatically update tsconfig.json file\n * Declaration Files: Generate component and API declaration files\n\n\nSupported Libraries#\n\nCurrently, ew-auto-import-tool supports the following component libraries:\n\n * Element Plus\n * Ant Design Vue\n * Naive UI\n * Vant\n\n\nVersion Requirements#\n\n * Node.js >= 14.0.0\n * Vue 3.x\n * Vite 2.x or higher\n\n\nNext Steps#\n\n * Getting Started - Learn how to install and use the tool\n * Usage - Detailed usage instructions and options\n * Supported Libraries - View details of supported component libraries\n * Implementation - Understand the implementation principles of the tool","routePath":"/ew-auto-import-tool/en/guide/","lang":"en","toc":[{"text":"What is ew-auto-import-tool?","id":"what-is-ew-auto-import-tool","depth":2,"charIndex":3},{"text":"Why do we need this tool?","id":"why-do-we-need-this-tool","depth":2,"charIndex":322},{"text":"Tool Features","id":"tool-features","depth":2,"charIndex":817},{"text":"Supported Libraries","id":"supported-libraries","depth":2,"charIndex":1144},{"text":"Version Requirements","id":"version-requirements","depth":2,"charIndex":1298},{"text":"Next Steps","id":"next-steps","depth":2,"charIndex":1377}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"Supported Libraries","content":"#\n\new-auto-import-tool currently supports the following Vue component libraries.\nFor each library, the tool automatically configures the necessary plugins and\ndependencies for on-demand imports.\n\n\nElement Plus#\n\nElement Plus is a Vue 3 based component library for designers and developers.\n\n\nFeatures#\n\n * Comprehensive design system with over 50 components\n * TypeScript support\n * Internationalization support\n * Theme customization\n\n\nConfiguration#\n\nWhen configuring Element Plus, the tool will:\n\n 1. Install dependencies:\n    \n    * element-plus\n    * unplugin-auto-import\n    * unplugin-vue-components\n\n 2. Configure Vite plugins with the ElementPlusResolver\n\n\nUsage Example#\n\n\n\n\nAnt Design Vue#\n\nAnt Design Vue is an enterprise-class UI components based on Ant Design and Vue.\n\n\nFeatures#\n\n * Enterprise-level design system\n * Rich set of high-quality components\n * Written in TypeScript with complete types\n * Internationalization support\n\n\nConfiguration#\n\nWhen configuring Ant Design Vue, the tool will:\n\n 1. Install dependencies:\n    \n    * ant-design-vue\n    * unplugin-auto-import\n    * unplugin-vue-components\n\n 2. Configure Vite plugins with the AntDesignVueResolver\n\n\nUsage Example#\n\n\n\n\nNaive UI#\n\nNaive UI is a Vue 3 component library with TypeScript support and flexible theme\ncustomization.\n\n\nFeatures#\n\n * Over 80 components\n * Theme customization\n * TypeScript support\n * Tree-shakable\n\n\nConfiguration#\n\nWhen configuring Naive UI, the tool will:\n\n 1. Install dependencies:\n    \n    * naive-ui\n    * unplugin-auto-import\n    * unplugin-vue-components\n\n 2. Configure Vite plugins with the NaiveUiResolver\n\n\nUsage Example#\n\n\n\n\nVant#\n\nVant is a lightweight mobile UI component library for Vue.\n\n\nFeatures#\n\n * 60+ high-quality components\n * 90%+ unit test coverage\n * Extensive documentation and demos\n * Support for tree shaking\n\n\nConfiguration#\n\nWhen configuring Vant, the tool will:\n\n 1. Install dependencies:\n    \n    * vant\n    * unplugin-auto-import\n    * unplugin-vue-components\n\n 2. Configure Vite plugins with the VantResolver\n\n\nUsage Example#\n\n","routePath":"/ew-auto-import-tool/en/guide/supported-libraries","lang":"en","toc":[{"text":"Element Plus","id":"element-plus","depth":2,"charIndex":196},{"text":"Features","id":"features","depth":3,"charIndex":291},{"text":"Configuration","id":"configuration","depth":3,"charIndex":436},{"text":"Usage Example","id":"usage-example","depth":3,"charIndex":665},{"text":"Ant Design Vue","id":"ant-design-vue","depth":2,"charIndex":684},{"text":"Features","id":"features-1","depth":3,"charIndex":784},{"text":"Configuration","id":"configuration-1","depth":3,"charIndex":947},{"text":"Usage Example","id":"usage-example-1","depth":3,"charIndex":1181},{"text":"Naive UI","id":"naive-ui","depth":2,"charIndex":1200},{"text":"Features","id":"features-2","depth":3,"charIndex":1309},{"text":"Configuration","id":"configuration-2","depth":3,"charIndex":1406},{"text":"Usage Example","id":"usage-example-2","depth":3,"charIndex":1623},{"text":"Vant","id":"vant","depth":2,"charIndex":1642},{"text":"Features","id":"features-3","depth":3,"charIndex":1710},{"text":"Configuration","id":"configuration-3","depth":3,"charIndex":1846},{"text":"Usage Example","id":"usage-example-3","depth":3,"charIndex":2052}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"Usage","content":"#\n\n\nCommand Line Options#\n\new-auto-import-tool provides the following command line options:\n\nOPTION      SHORT   DESCRIPTION                     DEFAULT VALUE\n--library   -l      Specify the component library   None (interactive)\n--path      -p      Specify the project path        Current directory\n--version   -v      Display version number          -\n--help      -h      Display help information        -\n\n\nInteractive Usage#\n\nThe simplest way to use the tool is to run it in the root directory of your Vue\nproject:\n\n\n\nThe tool will guide you through the following steps:\n\n 1. Select the component library to configure\n 2. Confirm configuration information\n 3. Automatically complete the configuration\n\n\nNon-interactive Usage#\n\nIf you want to use it in scripts or CI/CD environments, you can specify all\nnecessary parameters:\n\n\n\n\nSupported Libraries#\n\nCurrently, the following component libraries are supported:\n\n * element-plus - Element Plus\n * ant-design-vue - Ant Design Vue\n * naive-ui - Naive UI\n * vant - Vant\n\n\nConfiguration Examples#\n\n\nElement Plus#\n\n\n\n\nAnt Design Vue#\n\n\n\n\nNaive UI#\n\n\n\n\nVant#\n\n\n\n\nConfiguration Results#\n\nAfter the tool runs successfully, it will complete the following configurations:\n\n 1. Install necessary dependencies:\n    \n    * unplugin-auto-import\n    * unplugin-vue-components\n    * The selected component library\n\n 2. Update the vite.config.ts file, adding auto-import plugin configuration\n\n 3. Update the tsconfig.json file, adding declaration file references\n\n 4. Generate components.d.ts and auto-imports.d.ts declaration files\n\n\nUsing the Generated Configuration#\n\nAfter configuration is complete, you can directly use the components from the\ncomponent library in your Vue components without manual imports:\n\n","routePath":"/ew-auto-import-tool/en/guide/usage","lang":"en","toc":[{"text":"Command Line Options","id":"command-line-options","depth":2,"charIndex":3},{"text":"Interactive Usage","id":"interactive-usage","depth":2,"charIndex":409},{"text":"Non-interactive Usage","id":"non-interactive-usage","depth":2,"charIndex":706},{"text":"Supported Libraries","id":"supported-libraries","depth":2,"charIndex":832},{"text":"Configuration Examples","id":"configuration-examples","depth":2,"charIndex":1021},{"text":"Element Plus","id":"element-plus","depth":3,"charIndex":1047},{"text":"Ant Design Vue","id":"ant-design-vue","depth":3,"charIndex":1065},{"text":"Naive UI","id":"naive-ui","depth":3,"charIndex":1085},{"text":"Vant","id":"vant","depth":3,"charIndex":1099},{"text":"Configuration Results","id":"configuration-results","depth":2,"charIndex":1109},{"text":"Using the Generated Configuration","id":"using-the-generated-configuration","depth":2,"charIndex":1570}],"domain":"","frontmatter":{},"version":""}]