"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["922"],{5248:function(e,n,s){s.r(n),s.d(n,{default:()=>l});var a=s(2676),r=s(453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",strong:"strong",pre:"pre",ul:"ul",li:"li",ol:"ol",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td"},(0,r.ah)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.h1,{id:"dependency-manager",children:["Dependency Manager",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#dependency-manager",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"The Dependency Manager module is responsible for installing and managing the dependencies required for auto-import functionality. It provides functions to detect the package manager used in the project and install the necessary packages."}),"\n",(0,a.jsxs)(n.h2,{id:"api-reference",children:["API Reference",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-reference",children:"#"})]}),"\n",(0,a.jsxs)(n.h3,{id:"installdependencies",children:[(0,a.jsx)(n.code,{children:"installDependencies"}),(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installdependencies",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:"function installDependencies(\n  options: InstallDependenciesOptions\n): Promise<InstallDependenciesResult>;\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"options: InstallDependenciesOptions"})," - Configuration options for dependency installation","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"path?: string"})," - The path to the project directory (defaults to current directory)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"library: string"})," - The component library to install"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"packageManager?: 'npm' | 'yarn' | 'pnpm'"})," - The package manager to use (auto-detected if not specified)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"Promise<InstallDependenciesResult>"})," - A promise that resolves to the installation result","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"success: boolean"})," - Whether the installation was successful"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"packageManager: 'npm' | 'yarn' | 'pnpm'"})," - The package manager used"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"installedPackages: string[]"})," - The list of installed packages"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Example:"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'import { installDependencies } from "ew-auto-import-tool";\n\nasync function setupDependencies() {\n  try {\n    const result = await installDependencies({\n      path: "./my-vue-project",\n      library: "element-plus",\n    });\n\n    if (result.success) {\n      console.log(\n        `Successfully installed dependencies using ${result.packageManager}`\n      );\n      console.log("Installed packages:", result.installedPackages.join(", "));\n    } else {\n      console.error("Failed to install dependencies");\n    }\n  } catch (error) {\n    console.error("Error installing dependencies:", error);\n  }\n}\n\nsetupDependencies();\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"implementation-details",children:["Implementation Details",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#implementation-details",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"The Dependency Manager performs the following operations:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Package Manager Detection"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Detects whether the project uses npm, yarn, or pnpm based on lock files"}),"\n",(0,a.jsx)(n.li,{children:"Falls back to npm if no package manager is detected"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Dependency Resolution"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Determines the required packages based on the selected component library"}),"\n",(0,a.jsx)(n.li,{children:"Always includes core packages: unplugin-auto-import, unplugin-vue-components"}),"\n",(0,a.jsx)(n.li,{children:"Adds library-specific packages (e.g., element-plus for Element Plus)"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Installation Process"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Executes the appropriate install command based on the detected package manager"}),"\n",(0,a.jsx)(n.li,{children:"Handles installation errors and provides detailed feedback"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"package-manager-commands",children:["Package Manager Commands",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#package-manager-commands",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"The module uses different commands depending on the detected package manager:"}),"\n",(0,a.jsxs)(n.table,{children:["\n",(0,a.jsxs)(n.thead,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.th,{children:"Package Manager"}),"\n",(0,a.jsx)(n.th,{children:"Install Command"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.tbody,{children:["\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"npm"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"npm install --save-dev <packages>"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"yarn"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"yarn add --dev <packages>"})}),"\n"]}),"\n",(0,a.jsxs)(n.tr,{children:["\n",(0,a.jsx)(n.td,{children:"pnpm"}),"\n",(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"pnpm add --save-dev <packages>"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For component libraries, the module uses the standard installation command without the ",(0,a.jsx)(n.code,{children:"--save-dev"})," flag, as these are runtime dependencies."]}),"\n",(0,a.jsxs)(n.h2,{id:"source-code-analysis",children:["Source Code Analysis",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#source-code-analysis",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"The Dependency Manager uses Node.js child process execution to run package manager commands. It follows these steps:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Detect or use the specified package manager"}),"\n",(0,a.jsx)(n.li,{children:"Determine the packages to install based on the library"}),"\n",(0,a.jsx)(n.li,{children:"Execute the installation commands"}),"\n",(0,a.jsx)(n.li,{children:"Parse the output to determine success or failure"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-typescript",children:'// Simplified implementation\nasync function installDependencies(\n  options: InstallDependenciesOptions\n): Promise<InstallDependenciesResult> {\n  const projectPath = options.path || process.cwd();\n  const packageManager =\n    options.packageManager || (await detectPackageManager(projectPath));\n\n  // Determine packages to install\n  const devDependencies = ["unplugin-auto-import", "unplugin-vue-components"];\n  const dependencies = [options.library];\n\n  // Install dev dependencies\n  const devInstallCommand = getInstallCommand(\n    packageManager,\n    devDependencies,\n    true\n  );\n  await executeCommand(devInstallCommand, projectPath);\n\n  // Install runtime dependencies\n  const runtimeInstallCommand = getInstallCommand(\n    packageManager,\n    dependencies,\n    false\n  );\n  await executeCommand(runtimeInstallCommand, projectPath);\n\n  return {\n    success: true,\n    packageManager,\n    installedPackages: [...devDependencies, ...dependencies],\n  };\n}\n\nfunction getInstallCommand(\n  packageManager: string,\n  packages: string[],\n  isDev: boolean\n): string {\n  const packagesStr = packages.join(" ");\n  switch (packageManager) {\n    case "npm":\n      return `npm install ${isDev ? "--save-dev" : ""} ${packagesStr}`;\n    case "yarn":\n      return `yarn add ${isDev ? "--dev" : ""} ${packagesStr}`;\n    case "pnpm":\n      return `pnpm add ${isDev ? "--save-dev" : ""} ${packagesStr}`;\n    default:\n      throw new Error(`Unsupported package manager: ${packageManager}`);\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"error-handling",children:["Error Handling",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#error-handling",children:"#"})]}),"\n",(0,a.jsx)(n.p,{children:"The Dependency Manager includes robust error handling to provide clear feedback when issues are encountered:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Package manager detection errors"}),"\n",(0,a.jsx)(n.li,{children:"Network connectivity issues"}),"\n",(0,a.jsx)(n.li,{children:"Package resolution failures"}),"\n",(0,a.jsx)(n.li,{children:"Installation process errors"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"These errors are propagated to the caller with descriptive messages to help users troubleshoot issues."}),"\n",(0,a.jsxs)(n.h2,{id:"related-modules",children:["Related Modules",(0,a.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#related-modules",children:"#"})]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/en/api/project-checker",children:"Project Checker"})," - Provides package manager detection used by the Dependency Manager"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"/en/api/vite-config-manager",children:"Vite Config Manager"})," - Uses the installed packages to configure Vite"]}),"\n"]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(i,{...e})}):i(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["en%2Fapi%2Fdependency-manager.md"]={toc:[{text:"API Reference",id:"api-reference",depth:2},{text:"`installDependencies`",id:"installdependencies",depth:3},{text:"Implementation Details",id:"implementation-details",depth:2},{text:"Package Manager Commands",id:"package-manager-commands",depth:2},{text:"Source Code Analysis",id:"source-code-analysis",depth:2},{text:"Error Handling",id:"error-handling",depth:2},{text:"Related Modules",id:"related-modules",depth:2}],title:"Dependency Manager",headingTitle:"Dependency Manager",frontmatter:{}}}}]);