"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["658"],{1523:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var i=r(2676),a=r(453);function c(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code",ul:"ul",li:"li",ol:"ol"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"核心-api",children:["核心 API",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心-api",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"ew-auto-import-tool 提供了一系列核心 API，可以在您的项目中以编程方式使用。以下是主要的 API 函数及其用法。"}),"\n",(0,i.jsxs)(n.h2,{id:"configureautoimport",children:["configureAutoImport",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configureautoimport",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"主函数，用于执行自动导入配置的全过程。"}),"\n",(0,i.jsxs)(n.h3,{id:"函数签名",children:["函数签名",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数签名",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"async function configureAutoImport(\n  library: Library,\n  projectPath: string = process.cwd()\n): Promise<boolean>;\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"参数",children:["参数",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"library"}),": 要配置的组件库，类型为 ",(0,i.jsx)(n.code,{children:"Library"}),"（字符串字面量类型）"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"projectPath"}),": 项目路径，默认为当前工作目录"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"返回值",children:["返回值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Promise<boolean>"}),": 配置是否成功的 Promise"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"示例",children:["示例",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { configureAutoImport } from "ew-auto-import-tool";\n\nasync function setup() {\n  try {\n    const success = await configureAutoImport(\n      "element-plus",\n      "/path/to/project"\n    );\n    if (success) {\n      console.log("配置成功！");\n    } else {\n      console.log("配置失败！");\n    }\n  } catch (error) {\n    console.error("配置出错：", error);\n  }\n}\n\nsetup();\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"实现细节",children:["实现细节",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现细节",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"configureAutoImport"})," 函数执行以下步骤："]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["调用 ",(0,i.jsx)(n.code,{children:"checkProject"})," 检查项目结构"]}),"\n",(0,i.jsxs)(n.li,{children:["调用 ",(0,i.jsx)(n.code,{children:"installDependencies"})," 安装必要的依赖"]}),"\n",(0,i.jsxs)(n.li,{children:["调用 ",(0,i.jsx)(n.code,{children:"updateViteConfig"})," 更新 Vite 配置"]}),"\n",(0,i.jsxs)(n.li,{children:["调用 ",(0,i.jsx)(n.code,{children:"updateTsConfig"})," 更新 TypeScript 配置（如果项目使用 TypeScript）"]}),"\n",(0,i.jsxs)(n.li,{children:["调用 ",(0,i.jsx)(n.code,{children:"generateDeclarationFiles"})," 生成声明文件"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"类型定义",children:["类型定义",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类型定义",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"library",children:["Library",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#library",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"支持的组件库类型："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'type Library = "element-plus" | "ant-design-vue" | "naive-ui" | "vant";\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"packagemanager",children:["PackageManager",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#packagemanager",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"支持的包管理器类型："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'type PackageManager = "npm" | "yarn" | "pnpm";\n'})}),"\n",(0,i.jsxs)(n.h3,{id:"projectinfo",children:["ProjectInfo",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#projectinfo",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"项目信息接口："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface ProjectInfo {\n  isValid: boolean; // 项目是否有效\n  isVue: boolean; // 是否为Vue项目\n  isVite: boolean; // 是否使用Vite\n  hasTypeScript: boolean; // 是否使用TypeScript\n  packageManager: PackageManager; // 使用的包管理器\n  viteConfigPath?: string; // Vite配置文件路径\n  tsConfigPath?: string; // TypeScript配置文件路径\n  errors?: string[]; // 错误信息\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"libraryconfig",children:["LibraryConfig",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#libraryconfig",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"组件库配置接口："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface LibraryConfig {\n  dependencies: string[]; // 需要安装的依赖\n  resolverImport: string; // 解析器导入语句\n  resolverName: string; // 解析器名称\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"导出的模块",children:["导出的模块",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#导出的模块",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["除了主函数 ",(0,i.jsx)(n.code,{children:"configureAutoImport"})," 外，该工具还导出了以下模块，可以单独使用："]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"checkProject"}),": 项目检查器"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"installDependencies"}),": 依赖管理器"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateViteConfig"}),": Vite 配置管理器"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"updateTsConfig"}),": TypeScript 配置管理器"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"generateDeclarationFiles"}),": 声明文件生成器"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"这些模块的详细 API 请参考各自的文档页面："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/zh/api/project-checker",children:"项目检查器"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/zh/api/dependency-manager",children:"依赖管理器"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/zh/api/vite-config-manager",children:"Vite 配置管理器"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/zh/api/ts-config-manager",children:"TypeScript 配置管理器"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/zh/api/declaration-generator",children:"声明文件生成器"})}),"\n"]})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}let d=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["zh%2Fapi%2Findex.md"]={toc:[{text:"configureAutoImport",id:"configureautoimport",depth:2},{text:"函数签名",id:"函数签名",depth:3},{text:"参数",id:"参数",depth:3},{text:"返回值",id:"返回值",depth:3},{text:"示例",id:"示例",depth:3},{text:"实现细节",id:"实现细节",depth:3},{text:"类型定义",id:"类型定义",depth:2},{text:"Library",id:"library",depth:3},{text:"PackageManager",id:"packagemanager",depth:3},{text:"ProjectInfo",id:"projectinfo",depth:3},{text:"LibraryConfig",id:"libraryconfig",depth:3},{text:"导出的模块",id:"导出的模块",depth:2}],title:"核心 API",headingTitle:"核心 API",frontmatter:{}}}}]);