"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["521"],{733:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var t=r(2676),i=r(453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre",h4:"h4",ul:"ul",li:"li",ol:"ol",strong:"strong"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"声明文件生成器",children:["声明文件生成器",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#声明文件生成器",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"declarationGenerator"})," 模块负责在项目中生成初始的类型声明文件，这些文件用于提供组件和 API 的类型支持，确保 TypeScript 能够正确识别自动导入的组件和 API。"]}),"\n",(0,t.jsxs)(n.h2,{id:"api-参考",children:["API 参考",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-参考",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"generatedeclarationfiles",children:["generateDeclarationFiles",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generatedeclarationfiles",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"async function generateDeclarationFiles(projectPath: string): Promise<void>;\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"参数",children:["参数",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"projectPath: string"})," - 项目根目录的路径"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"返回值",children:["返回值",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Promise<void>"})," - 异步操作，成功时无返回值"]}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"异常",children:["异常",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#异常",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"当生成声明文件失败时抛出错误"}),"\n"]}),"\n",(0,t.jsxs)(n.h4,{id:"使用示例",children:["使用示例",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用示例",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { generateDeclarationFiles } from "ew-auto-import-tool";\n\n// 生成初始声明文件\nawait generateDeclarationFiles("/path/to/your/project");\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"实现细节",children:["实现细节",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现细节",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"generateDeclarationFiles"})," 函数会在项目根目录下创建两个初始的声明文件："]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"components.d.ts"})," - 组件类型声明文件"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"auto-imports.d.ts"})," - API 类型声明文件"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["这些文件包含基本的类型声明结构，但实际内容会在项目首次启动时由 ",(0,t.jsx)(n.code,{children:"unplugin-auto-import"})," 和 ",(0,t.jsx)(n.code,{children:"unplugin-vue-components"})," 插件自动更新。"]}),"\n",(0,t.jsxs)(n.h3,{id:"componentsdts-模板",children:["components.d.ts 模板",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#componentsdts-模板",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// generated by unplugin-vue-components\n// We suggest you to commit this file into source control\n// Read more: https://github.com/vuejs/core/pull/3399\nimport "@vue/runtime-core";\n\ndeclare module "@vue/runtime-core" {\n  export interface GlobalComponents {\n    // 此处将由插件自动填充组件类型\n  }\n}\n\nexport {};\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"auto-importsdts-模板",children:["auto-imports.d.ts 模板",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#auto-importsdts-模板",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// generated by unplugin-auto-import\n// We suggest you to commit this file into source control\nexport {};\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"声明文件的作用",children:["声明文件的作用",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#声明文件的作用",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"这些声明文件在项目中起到以下作用："}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"提供类型支持"}),"：使 TypeScript 能够识别自动导入的组件和 API，提供代码补全和类型检查"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"改善开发体验"}),"：在 IDE 中提供自动补全和类型提示，减少开发过程中的错误"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"文档参考"}),"：作为可用组件和 API 的参考文档，帮助开发者了解可用的组件和 API"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"工作流程",children:["工作流程",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#工作流程",children:"#"})]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"declarationGenerator"})," 模块生成初始的声明文件模板"]}),"\n",(0,t.jsxs)(n.li,{children:["当项目首次启动时，",(0,t.jsx)(n.code,{children:"unplugin-auto-import"})," 和 ",(0,t.jsx)(n.code,{children:"unplugin-vue-components"})," 插件会扫描项目和组件库"]}),"\n",(0,t.jsx)(n.li,{children:"插件根据扫描结果更新声明文件，添加具体的组件和 API 类型声明"}),"\n",(0,t.jsx)(n.li,{children:"TypeScript 编译器和 IDE 使用这些声明文件提供类型检查和代码补全"}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"配置后的项目结构",children:["配置后的项目结构",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#配置后的项目结构",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"配置完成后，项目根目录下会新增两个声明文件："}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"my-vue-app/\n├── node_modules/\n├── public/\n├── src/\n│   ├── assets/\n│   ├── components/\n│   ├── App.vue\n│   ├── main.ts\n│   └── vite-env.d.ts\n├── auto-imports.d.ts  # 新增：API 自动导入声明文件\n├── components.d.ts    # 新增：组件自动导入声明文件\n├── index.html\n├── package.json\n├── tsconfig.json\n├── tsconfig.node.json\n└── vite.config.ts\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"源码分析",children:["源码分析",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码分析",children:"#"})]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"declarationGenerator"})," 模块使用 ",(0,t.jsx)(n.code,{children:"fs-extra"})," 库来创建和写入文件："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"// 创建组件声明文件\nconst componentsDeclarationContent = `// generated by unplugin-vue-components\n// We suggest you to commit this file into source control\n// Read more: https://github.com/vuejs/core/pull/3399\nimport '@vue/runtime-core'\n\ndeclare module '@vue/runtime-core' {\n  export interface GlobalComponents {\n    // 此处将由插件自动填充组件类型\n  }\n}\n\nexport {}\n`;\n\n// 创建API声明文件\nconst autoImportsDeclarationContent = `// generated by unplugin-auto-import\n// We suggest you to commit this file into source control\nexport {}\n`;\n\n// 写入文件\nawait fs.writeFile(\n  componentsDeclarationPath,\n  componentsDeclarationContent,\n  \"utf-8\"\n);\nawait fs.writeFile(\n  autoImportsDeclarationPath,\n  autoImportsDeclarationContent,\n  \"utf-8\"\n);\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"注意事项",children:["注意事项",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"如果声明文件已经存在，函数会跳过创建，避免覆盖已有的文件"}),"\n",(0,t.jsx)(n.li,{children:"声明文件的实际内容会在项目首次启动时由插件更新，初始模板只提供基本结构"}),"\n",(0,t.jsx)(n.li,{children:"建议将这些声明文件提交到版本控制系统，以便团队成员共享类型定义"}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}let d=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["zh%2Fapi%2Fdeclaration-generator.md"]={toc:[{text:"API 参考",id:"api-参考",depth:2},{text:"generateDeclarationFiles",id:"generatedeclarationfiles",depth:3},{text:"参数",id:"参数",depth:4},{text:"返回值",id:"返回值",depth:4},{text:"异常",id:"异常",depth:4},{text:"使用示例",id:"使用示例",depth:4},{text:"实现细节",id:"实现细节",depth:2},{text:"components.d.ts 模板",id:"componentsdts-模板",depth:3},{text:"auto-imports.d.ts 模板",id:"auto-importsdts-模板",depth:3},{text:"声明文件的作用",id:"声明文件的作用",depth:2},{text:"工作流程",id:"工作流程",depth:2},{text:"配置后的项目结构",id:"配置后的项目结构",depth:2},{text:"源码分析",id:"源码分析",depth:2},{text:"注意事项",id:"注意事项",depth:2}],title:"声明文件生成器",headingTitle:"声明文件生成器",frontmatter:{}}}}]);