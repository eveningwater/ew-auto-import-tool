"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["285"],{1781:function(e,n,r){r.r(n),r.d(n,{default:()=>a});var c=r(2676),s=r(453);function t(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",h4:"h4",pre:"pre",code:"code",ul:"ul",li:"li",ol:"ol"},(0,s.ah)(),e.components);return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsxs)(n.h1,{id:"项目检查器-projectchecker",children:["项目检查器 (projectChecker)",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#项目检查器-projectchecker",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"项目检查器模块用于检测项目结构，确认是否为有效的 Vue + Vite + TypeScript 项目。"}),"\n",(0,c.jsxs)(n.h2,{id:"api-参考",children:["API 参考",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-参考",children:"#"})]}),"\n",(0,c.jsxs)(n.h3,{id:"checkproject",children:["checkProject",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#checkproject",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"检查项目结构，返回项目信息。"}),"\n",(0,c.jsxs)(n.h4,{id:"函数签名",children:["函数签名",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数签名",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"async function checkProject(projectPath: string): Promise<ProjectInfo>;\n"})}),"\n",(0,c.jsxs)(n.h4,{id:"参数",children:["参数",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"projectPath"}),": 项目路径，字符串类型"]}),"\n"]}),"\n",(0,c.jsxs)(n.h4,{id:"返回值",children:["返回值",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值",children:"#"})]}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsxs)(n.li,{children:[(0,c.jsx)(n.code,{children:"Promise<ProjectInfo>"}),": 包含项目信息的 Promise"]}),"\n"]}),"\n",(0,c.jsxs)(n.h4,{id:"示例",children:["示例",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'import { checkProject } from "ew-auto-import-tool";\n\nasync function checkMyProject() {\n  try {\n    const projectInfo = await checkProject("/path/to/project");\n\n    if (projectInfo.isValid) {\n      console.log("项目有效！");\n      console.log(`使用的包管理器: ${projectInfo.packageManager}`);\n      console.log(`是否使用TypeScript: ${projectInfo.hasTypeScript}`);\n    } else {\n      console.log("项目无效！");\n      console.log("错误信息:", projectInfo.errors);\n    }\n  } catch (error) {\n    console.error("检查项目时出错：", error);\n  }\n}\n\ncheckMyProject();\n'})}),"\n",(0,c.jsxs)(n.h2,{id:"实现细节",children:["实现细节",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现细节",children:"#"})]}),"\n",(0,c.jsxs)(n.p,{children:[(0,c.jsx)(n.code,{children:"checkProject"})," 函数执行以下检查："]}),"\n",(0,c.jsxs)(n.ol,{children:["\n",(0,c.jsx)(n.li,{children:"检查 package.json 是否存在"}),"\n",(0,c.jsx)(n.li,{children:"检查是否安装了 Vue 依赖"}),"\n",(0,c.jsx)(n.li,{children:"检查是否使用 Vite 作为构建工具"}),"\n",(0,c.jsx)(n.li,{children:"检查是否存在 vite.config.ts 或 vite.config.js 文件"}),"\n",(0,c.jsx)(n.li,{children:"检查是否使用 TypeScript（是否存在 tsconfig.json 文件）"}),"\n",(0,c.jsx)(n.li,{children:"检测使用的包管理器（npm、yarn 或 pnpm）"}),"\n"]}),"\n",(0,c.jsxs)(n.h3,{id:"返回的-projectinfo-对象",children:["返回的 ProjectInfo 对象",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回的-projectinfo-对象",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:"interface ProjectInfo {\n  isValid: boolean; // 项目是否有效\n  isVue: boolean; // 是否为Vue项目\n  isVite: boolean; // 是否使用Vite\n  hasTypeScript: boolean; // 是否使用TypeScript\n  packageManager: PackageManager; // 使用的包管理器\n  viteConfigPath?: string; // Vite配置文件路径\n  tsConfigPath?: string; // TypeScript配置文件路径\n  errors?: string[]; // 错误信息\n}\n"})}),"\n",(0,c.jsxs)(n.h3,{id:"有效项目的条件",children:["有效项目的条件",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#有效项目的条件",children:"#"})]}),"\n",(0,c.jsx)(n.p,{children:"项目被认为是有效的，需要满足以下条件："}),"\n",(0,c.jsxs)(n.ul,{children:["\n",(0,c.jsx)(n.li,{children:"是 Vue 项目（package.json 中包含 Vue 依赖）"}),"\n",(0,c.jsx)(n.li,{children:"使用 Vite 作为构建工具（package.json 中包含 Vite 依赖）"}),"\n",(0,c.jsx)(n.li,{children:"存在 vite.config.ts 或 vite.config.js 文件"}),"\n"]}),"\n",(0,c.jsxs)(n.p,{children:["如果项目不满足这些条件，",(0,c.jsx)(n.code,{children:"isValid"})," 将被设置为 ",(0,c.jsx)(n.code,{children:"false"}),"，并且 ",(0,c.jsx)(n.code,{children:"errors"})," 数组将包含相应的错误信息。"]}),"\n",(0,c.jsxs)(n.h2,{id:"源码分析",children:["源码分析",(0,c.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码分析",children:"#"})]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-typescript",children:'export async function checkProject(projectPath: string): Promise<ProjectInfo> {\n  const result: ProjectInfo = {\n    isValid: false,\n    isVue: false,\n    isVite: false,\n    hasTypeScript: false,\n    packageManager: "npm",\n    errors: [],\n  };\n\n  try {\n    // 检查package.json是否存在\n    const packageJsonPath = path.join(projectPath, "package.json");\n    if (!fs.existsSync(packageJsonPath)) {\n      result.errors?.push(\n        "未找到package.json文件，请确保在Vue项目根目录中运行此工具"\n      );\n      return result;\n    }\n\n    // 读取package.json\n    const packageJson = await fs.readJSON(packageJsonPath);\n\n    // 检查是否为Vue项目\n    if (!packageJson.dependencies?.vue && !packageJson.devDependencies?.vue) {\n      result.errors?.push("未检测到Vue依赖，请确保这是一个Vue项目");\n    } else {\n      result.isVue = true;\n    }\n\n    // 检查是否使用Vite\n    if (!packageJson.devDependencies?.vite) {\n      result.errors?.push("未检测到Vite依赖，此工具仅支持Vite项目");\n    } else {\n      result.isVite = true;\n\n      // 查找vite.config文件\n      const viteConfigPaths = [\n        path.join(projectPath, "vite.config.ts"),\n        path.join(projectPath, "vite.config.js"),\n      ];\n\n      for (const configPath of viteConfigPaths) {\n        if (fs.existsSync(configPath)) {\n          result.viteConfigPath = configPath;\n          break;\n        }\n      }\n\n      if (!result.viteConfigPath) {\n        result.errors?.push("未找到vite.config.ts或vite.config.js文件");\n      }\n    }\n\n    // 检查是否使用TypeScript\n    const tsConfigPath = path.join(projectPath, "tsconfig.json");\n    if (fs.existsSync(tsConfigPath)) {\n      result.hasTypeScript = true;\n      result.tsConfigPath = tsConfigPath;\n    }\n\n    // 检测包管理器\n    if (fs.existsSync(path.join(projectPath, "yarn.lock"))) {\n      result.packageManager = "yarn";\n    } else if (fs.existsSync(path.join(projectPath, "pnpm-lock.yaml"))) {\n      result.packageManager = "pnpm";\n    } else {\n      result.packageManager = "npm";\n    }\n\n    // 判断项目是否有效\n    result.isValid = result.isVue && result.isVite && !!result.viteConfigPath;\n\n    return result;\n  } catch (error) {\n    result.errors?.push(`检查项目结构时出错: ${error}`);\n    return result;\n  }\n}\n'})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(t,{...e})}):t(e)}let a=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["zh%2Fapi%2Fproject-checker.md"]={toc:[{text:"API 参考",id:"api-参考",depth:2},{text:"checkProject",id:"checkproject",depth:3},{text:"函数签名",id:"函数签名",depth:4},{text:"参数",id:"参数",depth:4},{text:"返回值",id:"返回值",depth:4},{text:"示例",id:"示例",depth:4},{text:"实现细节",id:"实现细节",depth:2},{text:"返回的 ProjectInfo 对象",id:"返回的-projectinfo-对象",depth:3},{text:"有效项目的条件",id:"有效项目的条件",depth:3},{text:"源码分析",id:"源码分析",depth:2}],title:"项目检查器 (projectChecker)",headingTitle:"项目检查器 (projectChecker)",frontmatter:{}}}}]);