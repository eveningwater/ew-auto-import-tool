"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["982"],{8091:function(e,n,r){r.r(n),r.d(n,{default:()=>c});var i=r(2676),s=r(453);function a(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",h4:"h4",pre:"pre",code:"code",ul:"ul",li:"li"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"依赖管理器-dependencymanager",children:["依赖管理器 (dependencyManager)",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#依赖管理器-dependencymanager",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"依赖管理器模块负责安装自动导入所需的依赖包，包括 unplugin-auto-import、unplugin-vue-components 和选择的组件库。"}),"\n",(0,i.jsxs)(n.h2,{id:"api-参考",children:["API 参考",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-参考",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"installdependencies",children:["installDependencies",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installdependencies",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"安装必要的依赖包。"}),"\n",(0,i.jsxs)(n.h4,{id:"函数签名",children:["函数签名",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#函数签名",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'async function installDependencies(\n  library: Library,\n  projectPath: string,\n  packageManager: PackageManager = "npm"\n): Promise<void>;\n'})}),"\n",(0,i.jsxs)(n.h4,{id:"参数",children:["参数",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#参数",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"library"}),": 要配置的组件库，类型为 ",(0,i.jsx)(n.code,{children:"Library"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"projectPath"}),": 项目路径，字符串类型"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"packageManager"}),": 包管理器，类型为 ",(0,i.jsx)(n.code,{children:"PackageManager"}),'，默认为 "npm"']}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"返回值",children:["返回值",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#返回值",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Promise<void>"}),": 安装完成的 Promise"]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"示例",children:["示例",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'import { installDependencies } from "ew-auto-import-tool";\n\nasync function installDeps() {\n  try {\n    await installDependencies("element-plus", "/path/to/project", "yarn");\n    console.log("依赖安装成功！");\n  } catch (error) {\n    console.error("依赖安装失败：", error);\n  }\n}\n\ninstallDeps();\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"实现细节",children:["实现细节",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实现细节",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"installDependencies"})," 函数根据选择的组件库和包管理器，安装必要的依赖包。"]}),"\n",(0,i.jsxs)(n.h3,{id:"安装的依赖",children:["安装的依赖",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安装的依赖",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"对于每个支持的组件库，会安装以下依赖："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"unplugin-auto-import - 用于自动导入 API"}),"\n",(0,i.jsx)(n.li,{children:"unplugin-vue-components - 用于自动导入组件"}),"\n",(0,i.jsx)(n.li,{children:"选择的组件库（如 element-plus、ant-design-vue 等）"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"支持的包管理器",children:["支持的包管理器",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#支持的包管理器",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["npm - 使用 ",(0,i.jsx)(n.code,{children:"npm install"})," 命令"]}),"\n",(0,i.jsxs)(n.li,{children:["yarn - 使用 ",(0,i.jsx)(n.code,{children:"yarn add"})," 命令"]}),"\n",(0,i.jsxs)(n.li,{children:["pnpm - 使用 ",(0,i.jsx)(n.code,{children:"pnpm add"})," 命令"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"组件库配置",children:["组件库配置",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件库配置",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["每个组件库的配置定义在 ",(0,i.jsx)(n.code,{children:"LIBRARY_CONFIGS"})," 对象中，包含以下信息："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"interface LibraryConfig {\n  dependencies: string[]; // 需要安装的依赖\n  resolverImport: string; // 解析器导入语句\n  resolverName: string; // 解析器名称\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"例如，Element Plus 的配置如下："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'{\n  dependencies: [\n    "element-plus",\n    "unplugin-auto-import",\n    "unplugin-vue-components"\n  ],\n  resolverImport: \'import { ElementPlusResolver } from "unplugin-vue-components/resolvers";\',\n  resolverName: "ElementPlusResolver"\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"源码分析",children:["源码分析",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#源码分析",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:'export async function installDependencies(\n  library: Library,\n  projectPath: string,\n  packageManager: PackageManager = "npm"\n): Promise<void> {\n  const libraryConfig = LIBRARY_CONFIGS[library];\n\n  if (!libraryConfig) {\n    throw new Error(`不支持的组件库: ${library}`);\n  }\n\n  const dependencies = libraryConfig.dependencies;\n\n  // 构建安装命令\n  const installCmd = packageManager === "npm" ? "install" : "add";\n  const args = [installCmd, ...dependencies, "--save"];\n\n  // 执行安装命令\n  return new Promise((resolve, reject) => {\n    const child = spawn(packageManager, args, {\n      cwd: projectPath,\n      stdio: "inherit",\n      shell: true,\n    });\n\n    child.on("close", (code) => {\n      if (code !== 0) {\n        reject(new Error(`依赖安装失败，退出码: ${code}`));\n      } else {\n        resolve();\n      }\n    });\n\n    child.on("error", (err) => {\n      reject(new Error(`依赖安装失败: ${err.message}`));\n    });\n  });\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["该函数使用 Node.js 的 ",(0,i.jsx)(n.code,{children:"child_process.spawn"})," 方法执行包管理器命令，安装必要的依赖包。根据检测到的包管理器类型，使用不同的安装命令。"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["zh%2Fapi%2Fdependency-manager.md"]={toc:[{text:"API 参考",id:"api-参考",depth:2},{text:"installDependencies",id:"installdependencies",depth:3},{text:"函数签名",id:"函数签名",depth:4},{text:"参数",id:"参数",depth:4},{text:"返回值",id:"返回值",depth:4},{text:"示例",id:"示例",depth:4},{text:"实现细节",id:"实现细节",depth:2},{text:"安装的依赖",id:"安装的依赖",depth:3},{text:"支持的包管理器",id:"支持的包管理器",depth:3},{text:"组件库配置",id:"组件库配置",depth:3},{text:"源码分析",id:"源码分析",depth:2}],title:"依赖管理器 (dependencyManager)",headingTitle:"依赖管理器 (dependencyManager)",frontmatter:{}}}}]);