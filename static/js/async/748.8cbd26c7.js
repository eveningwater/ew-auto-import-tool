"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["748"],{5458:function(e,n,i){i.r(n),i.d(n,{default:()=>a});var t=i(2676),r=i(453);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",code:"code",strong:"strong",pre:"pre",ul:"ul",li:"li",ol:"ol"},(0,r.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"vite-config-manager",children:["Vite Config Manager",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#vite-config-manager",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The Vite Config Manager module is responsible for updating the Vite configuration file to include the auto-import plugins. It provides functions to locate, parse, and modify the Vite configuration file to enable automatic component and API imports."}),"\n",(0,t.jsxs)(n.h2,{id:"api-reference",children:["API Reference",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-reference",children:"#"})]}),"\n",(0,t.jsxs)(n.h3,{id:"updateviteconfig",children:[(0,t.jsx)(n.code,{children:"updateViteConfig"}),(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#updateviteconfig",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Signature:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"function updateViteConfig(\n  options: UpdateViteConfigOptions\n): Promise<UpdateViteConfigResult>;\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"options: UpdateViteConfigOptions"})," - Configuration options for Vite config update","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"path?: string"})," - The path to the project directory (defaults to current directory)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"library: string"})," - The component library to configure"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"viteConfigPath?: string"})," - The path to the Vite configuration file (auto-detected if not specified)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Returns:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"Promise<UpdateViteConfigResult>"})," - A promise that resolves to the update result","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"success: boolean"})," - Whether the update was successful"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"viteConfigPath: string"})," - The path to the updated Vite configuration file"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"configUpdated: boolean"})," - Whether the configuration was actually modified"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { updateViteConfig } from "ew-auto-import-tool";\n\nasync function configureVite() {\n  try {\n    const result = await updateViteConfig({\n      path: "./my-vue-project",\n      library: "element-plus",\n    });\n\n    if (result.success) {\n      console.log(\n        `Successfully updated Vite config at ${result.viteConfigPath}`\n      );\n      if (result.configUpdated) {\n        console.log(\n          "Configuration was modified to include auto-import plugins"\n        );\n      } else {\n        console.log("Configuration already included auto-import plugins");\n      }\n    } else {\n      console.error("Failed to update Vite configuration");\n    }\n  } catch (error) {\n    console.error("Error updating Vite configuration:", error);\n  }\n}\n\nconfigureVite();\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"implementation-details",children:["Implementation Details",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#implementation-details",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The Vite Config Manager performs the following operations:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Configuration File Detection"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Locates the Vite configuration file (vite.config.js/ts)"}),"\n",(0,t.jsx)(n.li,{children:"Supports both JavaScript and TypeScript configuration files"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"AST Parsing and Transformation"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Parses the configuration file into an Abstract Syntax Tree (AST)"}),"\n",(0,t.jsx)(n.li,{children:"Analyzes the existing configuration to avoid duplicate plugins"}),"\n",(0,t.jsx)(n.li,{children:"Adds the necessary import statements for auto-import plugins"}),"\n",(0,t.jsx)(n.li,{children:"Adds plugin configurations with appropriate resolvers"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Code Generation"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Transforms the modified AST back to code"}),"\n",(0,t.jsx)(n.li,{children:"Preserves formatting and comments as much as possible"}),"\n",(0,t.jsx)(n.li,{children:"Writes the updated configuration back to the file"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"library-specific-configurations",children:["Library-Specific Configurations",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#library-specific-configurations",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The module adds different resolver configurations based on the selected component library:"}),"\n",(0,t.jsxs)(n.h3,{id:"element-plus",children:["Element Plus",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#element-plus",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import AutoImport from "unplugin-auto-import/vite";\nimport Components from "unplugin-vue-components/vite";\nimport { ElementPlusResolver } from "unplugin-vue-components/resolvers";\n\nexport default defineConfig({\n  plugins: [\n    // ... existing plugins\n    AutoImport({\n      resolvers: [ElementPlusResolver()],\n    }),\n    Components({\n      resolvers: [ElementPlusResolver()],\n    }),\n  ],\n});\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"ant-design-vue",children:["Ant Design Vue",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ant-design-vue",children:"#"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import AutoImport from "unplugin-auto-import/vite";\nimport Components from "unplugin-vue-components/vite";\nimport { AntDesignVueResolver } from "unplugin-vue-components/resolvers";\n\nexport default defineConfig({\n  plugins: [\n    // ... existing plugins\n    AutoImport({\n      resolvers: [AntDesignVueResolver()],\n    }),\n    Components({\n      resolvers: [AntDesignVueResolver()],\n    }),\n  ],\n});\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"source-code-analysis",children:["Source Code Analysis",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#source-code-analysis",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The Vite Config Manager uses AST manipulation libraries to modify the configuration file. It follows these steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Read the Vite configuration file"}),"\n",(0,t.jsx)(n.li,{children:"Parse it into an AST using a parser like Babel or TypeScript"}),"\n",(0,t.jsx)(n.li,{children:"Traverse the AST to find the plugins array"}),"\n",(0,t.jsx)(n.li,{children:"Check if auto-import plugins are already configured"}),"\n",(0,t.jsx)(n.li,{children:"Add the necessary import statements and plugin configurations"}),"\n",(0,t.jsx)(n.li,{children:"Generate code from the modified AST"}),"\n",(0,t.jsx)(n.li,{children:"Write the updated code back to the file"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'// Simplified implementation\nasync function updateViteConfig(\n  options: UpdateViteConfigOptions\n): Promise<UpdateViteConfigResult> {\n  const projectPath = options.path || process.cwd();\n  const viteConfigPath =\n    options.viteConfigPath || (await findViteConfig(projectPath));\n\n  if (!viteConfigPath) {\n    throw new Error("Vite configuration file not found");\n  }\n\n  // Read the configuration file\n  const configContent = fs.readFileSync(viteConfigPath, "utf-8");\n\n  // Parse the file into an AST\n  const ast = parseToAST(configContent, viteConfigPath);\n\n  // Check if plugins are already configured\n  const hasAutoImportPlugin = checkForPlugin(ast, "AutoImport");\n  const hasComponentsPlugin = checkForPlugin(ast, "Components");\n\n  if (hasAutoImportPlugin && hasComponentsPlugin) {\n    return {\n      success: true,\n      viteConfigPath,\n      configUpdated: false,\n    };\n  }\n\n  // Add import statements\n  addImportStatement(ast, "unplugin-auto-import/vite", "AutoImport");\n  addImportStatement(ast, "unplugin-vue-components/vite", "Components");\n\n  // Add resolver import based on library\n  const resolverName = getResolverName(options.library);\n  addImportStatement(\n    ast,\n    "unplugin-vue-components/resolvers",\n    resolverName,\n    true\n  );\n\n  // Add plugin configurations\n  addPluginConfigurations(ast, resolverName, options.library);\n\n  // Generate code from the modified AST\n  const updatedContent = generateCode(ast);\n\n  // Write the updated code back to the file\n  fs.writeFileSync(viteConfigPath, updatedContent, "utf-8");\n\n  return {\n    success: true,\n    viteConfigPath,\n    configUpdated: true,\n  };\n}\n\nfunction getResolverName(library: string): string {\n  switch (library) {\n    case "element-plus":\n      return "ElementPlusResolver";\n    case "ant-design-vue":\n      return "AntDesignVueResolver";\n    case "naive-ui":\n      return "NaiveUiResolver";\n    case "vant":\n      return "VantResolver";\n    default:\n      throw new Error(`Unsupported library: ${library}`);\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.h2,{id:"error-handling",children:["Error Handling",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#error-handling",children:"#"})]}),"\n",(0,t.jsx)(n.p,{children:"The Vite Config Manager includes robust error handling to provide clear feedback when issues are encountered:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Configuration file not found errors"}),"\n",(0,t.jsx)(n.li,{children:"Parsing errors for malformed configuration files"}),"\n",(0,t.jsx)(n.li,{children:"AST traversal and manipulation errors"}),"\n",(0,t.jsx)(n.li,{children:"File writing errors"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"These errors are propagated to the caller with descriptive messages to help users troubleshoot issues."}),"\n",(0,t.jsxs)(n.h2,{id:"related-modules",children:["Related Modules",(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#related-modules",children:"#"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/en/api/project-checker",children:"Project Checker"})," - Provides Vite configuration file detection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/en/api/dependency-manager",children:"Dependency Manager"})," - Installs the dependencies required by the Vite plugins"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/en/api/declaration-generator",children:"Declaration Generator"})," - Creates declaration files referenced by the Vite plugins"]}),"\n"]})]})}function o(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(s,{...e})}):s(e)}let a=o;o.__RSPRESS_PAGE_META={},o.__RSPRESS_PAGE_META["en%2Fapi%2Fvite-config-manager.md"]={toc:[{text:"API Reference",id:"api-reference",depth:2},{text:"`updateViteConfig`",id:"updateviteconfig",depth:3},{text:"Implementation Details",id:"implementation-details",depth:2},{text:"Library-Specific Configurations",id:"library-specific-configurations",depth:2},{text:"Element Plus",id:"element-plus",depth:3},{text:"Ant Design Vue",id:"ant-design-vue",depth:3},{text:"Source Code Analysis",id:"source-code-analysis",depth:2},{text:"Error Handling",id:"error-handling",depth:2},{text:"Related Modules",id:"related-modules",depth:2}],title:"Vite Config Manager",headingTitle:"Vite Config Manager",frontmatter:{}}}}]);