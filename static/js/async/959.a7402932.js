"use strict";(self.webpackChunkew_auto_import_tool_docs=self.webpackChunkew_auto_import_tool_docs||[]).push([["959"],{3235:function(e,n,i){i.r(n),i.d(n,{default:()=>o});var s=i(2676),t=i(453);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",h3:"h3",pre:"pre",h4:"h4",ul:"ul",li:"li",ol:"ol",strong:"strong"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"typescript-config-manager",children:["TypeScript Config Manager",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#typescript-config-manager",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tsConfigManager"})," module is responsible for updating the project's TypeScript configuration file, adding declaration files for auto-imported components and APIs to the ",(0,s.jsx)(n.code,{children:"include"})," configuration, ensuring that TypeScript correctly recognizes these types."]}),"\n",(0,s.jsxs)(n.h2,{id:"api-reference",children:["API Reference",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-reference",children:"#"})]}),"\n",(0,s.jsxs)(n.h3,{id:"updatetsconfig",children:["updateTsConfig",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#updatetsconfig",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"async function updateTsConfig(projectPath: string): Promise<void>;\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"parameters",children:["Parameters",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parameters",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"projectPath: string"})," - Path to the project root directory"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"return-value",children:["Return Value",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#return-value",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"Promise<void>"})," - Asynchronous operation, no return value on success"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"exceptions",children:["Exceptions",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#exceptions",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Throws an error when updating TypeScript configuration fails"}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"usage-example",children:["Usage Example",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#usage-example",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'import { updateTsConfig } from "ew-auto-import-tool";\n\n// Update TypeScript configuration, adding declaration file references\nawait updateTsConfig("/path/to/your/project");\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"implementation-details",children:["Implementation Details",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#implementation-details",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"updateTsConfig"})," function performs the following steps:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Check Configuration File Existence"}),": Verify if the ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," file exists in the project, skip configuration if it doesn't exist"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Read Existing Configuration"}),": Read the contents of the ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," file"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Check Include Configuration"}),": If the ",(0,s.jsx)(n.code,{children:"include"})," field doesn't exist in the configuration, create an empty array"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Add Declaration File References"}),": Add ",(0,s.jsx)(n.code,{children:"components.d.ts"})," and ",(0,s.jsx)(n.code,{children:"auto-imports.d.ts"})," to the ",(0,s.jsx)(n.code,{children:"include"})," array (if not already included)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Write Updated Configuration"}),": If there are changes, write the updated configuration back to the ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," file"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"declaration-files-description",children:["Declaration Files Description",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#declaration-files-description",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The two declaration files added by the module serve the following purposes:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"components.d.ts"})," - Contains type declarations for all components in the component library, allowing TypeScript to recognize components used in templates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"auto-imports.d.ts"})," - Contains type declarations for all auto-imported APIs from the component library, allowing TypeScript to recognize globally available APIs"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["These files are typically automatically generated and updated by the ",(0,s.jsx)(n.code,{children:"unplugin-auto-import"})," and ",(0,s.jsx)(n.code,{children:"unplugin-vue-components"})," plugins when the project is first started."]}),"\n",(0,s.jsxs)(n.h2,{id:"configuration-example",children:["Configuration Example",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#configuration-example",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tsconfig.json"})," before update:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "ES2020",\n    "useDefineForClassFields": true,\n    "module": "ESNext",\n    "lib": ["ES2020", "DOM", "DOM.Iterable"],\n    "skipLibCheck": true,\n    "types": ["vite/client"]\n  },\n  "include": ["src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue"]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"tsconfig.json"})," after update:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "ES2020",\n    "useDefineForClassFields": true,\n    "module": "ESNext",\n    "lib": ["ES2020", "DOM", "DOM.Iterable"],\n    "skipLibCheck": true,\n    "types": ["vite/client"]\n  },\n  "include": [\n    "src/**/*.ts",\n    "src/**/*.d.ts",\n    "src/**/*.tsx",\n    "src/**/*.vue",\n    "components.d.ts",\n    "auto-imports.d.ts"\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"source-code-analysis",children:["Source Code Analysis",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#source-code-analysis",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"tsConfigManager"})," module uses the ",(0,s.jsx)(n.code,{children:"fs-extra"})," library to read and write JSON files, which simplifies the process of handling configuration files:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Read tsconfig.json\nconst tsConfig = await fs.readJSON(tsConfigPath);\n\n// Check if include configuration exists\nif (!tsConfig.include) {\n  tsConfig.include = [];\n}\n\n// Add declaration files to include configuration\nconst declarationFiles = ["components.d.ts", "auto-imports.d.ts"];\nlet updated = false;\n\nfor (const file of declarationFiles) {\n  if (!tsConfig.include.includes(file)) {\n    tsConfig.include.push(file);\n    updated = true;\n  }\n}\n\n// If there are updates, write to file\nif (updated) {\n  await fs.writeJSON(tsConfigPath, tsConfig, { spaces: 2 });\n  console.log(`TypeScript configuration file updated: ${tsConfigPath}`);\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"notes",children:["Notes",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#notes",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The function automatically detects and skips configurations that already include the required declaration files"}),"\n",(0,s.jsxs)(n.li,{children:["If the ",(0,s.jsx)(n.code,{children:"tsconfig.json"})," file doesn't exist in the project, the function will skip configuration without reporting an error"]}),"\n",(0,s.jsxs)(n.li,{children:["The function only modifies the ",(0,s.jsx)(n.code,{children:"include"})," field and doesn't change other TypeScript configurations"]}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let o=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["en%2Fapi%2Fts-config-manager.md"]={toc:[{text:"API Reference",id:"api-reference",depth:2},{text:"updateTsConfig",id:"updatetsconfig",depth:3},{text:"Parameters",id:"parameters",depth:4},{text:"Return Value",id:"return-value",depth:4},{text:"Exceptions",id:"exceptions",depth:4},{text:"Usage Example",id:"usage-example",depth:4},{text:"Implementation Details",id:"implementation-details",depth:2},{text:"Declaration Files Description",id:"declaration-files-description",depth:2},{text:"Configuration Example",id:"configuration-example",depth:2},{text:"Source Code Analysis",id:"source-code-analysis",depth:2},{text:"Notes",id:"notes",depth:2}],title:"TypeScript Config Manager",headingTitle:"TypeScript Config Manager",frontmatter:{}}}}]);