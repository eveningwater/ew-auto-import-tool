[{"id":15,"title":"","content":"","routePath":"/ew-auto-import-tool/rspress.config","lang":"zh","toc":[],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"声明文件生成器","content":"#\n\ndeclarationGenerator 模块负责在项目中生成初始的类型声明文件，这些文件用于提供组件和 API 的类型支持，确保 TypeScript\n能够正确识别自动导入的组件和 API。\n\n\nAPI 参考#\n\n\ngenerateDeclarationFiles#\n\n\n\n参数#\n\n * projectPath: string - 项目根目录的路径\n\n返回值#\n\n * Promise<void> - 异步操作，成功时无返回值\n\n异常#\n\n * 当生成声明文件失败时抛出错误\n\n使用示例#\n\n\n\n\n实现细节#\n\ngenerateDeclarationFiles 函数会在项目根目录下创建两个初始的声明文件：\n\n 1. components.d.ts - 组件类型声明文件\n 2. auto-imports.d.ts - API 类型声明文件\n\n这些文件包含基本的类型声明结构，但实际内容会在项目首次启动时由 unplugin-auto-import 和 unplugin-vue-components\n插件自动更新。\n\n\ncomponents.d.ts 模板#\n\n\n\n\nauto-imports.d.ts 模板#\n\n\n\n\n声明文件的作用#\n\n这些声明文件在项目中起到以下作用：\n\n 1. 提供类型支持：使 TypeScript 能够识别自动导入的组件和 API，提供代码补全和类型检查\n 2. 改善开发体验：在 IDE 中提供自动补全和类型提示，减少开发过程中的错误\n 3. 文档参考：作为可用组件和 API 的参考文档，帮助开发者了解可用的组件和 API\n\n\n工作流程#\n\n 1. declarationGenerator 模块生成初始的声明文件模板\n 2. 当项目首次启动时，unplugin-auto-import 和 unplugin-vue-components 插件会扫描项目和组件库\n 3. 插件根据扫描结果更新声明文件，添加具体的组件和 API 类型声明\n 4. TypeScript 编译器和 IDE 使用这些声明文件提供类型检查和代码补全\n\n\n配置后的项目结构#\n\n配置完成后，项目根目录下会新增两个声明文件：\n\n\n\n\n源码分析#\n\ndeclarationGenerator 模块使用 fs-extra 库来创建和写入文件：\n\n\n\n\n注意事项#\n\n * 如果声明文件已经存在，函数会跳过创建，避免覆盖已有的文件\n * 声明文件的实际内容会在项目首次启动时由插件更新，初始模板只提供基本结构\n * 建议将这些声明文件提交到版本控制系统，以便团队成员共享类型定义","routePath":"/ew-auto-import-tool/api/declaration-generator","lang":"zh","toc":[{"text":"API 参考","id":"api-参考","depth":2,"charIndex":101},{"text":"generateDeclarationFiles","id":"generatedeclarationfiles","depth":3,"charIndex":111},{"text":"参数","id":"参数","depth":4,"charIndex":140},{"text":"返回值","id":"返回值","depth":4,"charIndex":180},{"text":"异常","id":"异常","depth":4,"charIndex":219},{"text":"使用示例","id":"使用示例","depth":4,"charIndex":243},{"text":"实现细节","id":"实现细节","depth":2,"charIndex":253},{"text":"components.d.ts 模板","id":"componentsdts-模板","depth":3,"charIndex":465},{"text":"auto-imports.d.ts 模板","id":"auto-importsdts-模板","depth":3,"charIndex":489},{"text":"声明文件的作用","id":"声明文件的作用","depth":2,"charIndex":515},{"text":"工作流程","id":"工作流程","depth":2,"charIndex":685},{"text":"配置后的项目结构","id":"配置后的项目结构","depth":2,"charIndex":886},{"text":"源码分析","id":"源码分析","depth":2,"charIndex":924},{"text":"注意事项","id":"注意事项","depth":2,"charIndex":981}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"依赖管理器 (dependencyManager)","content":"#\n\n依赖管理器模块负责安装自动导入所需的依赖包，包括 unplugin-auto-import、unplugin-vue-components 和选择的组件库。\n\n\nAPI 参考#\n\n\ninstallDependencies#\n\n安装必要的依赖包。\n\n函数签名#\n\n\n\n参数#\n\n * library: 要配置的组件库，类型为 Library\n * projectPath: 项目路径，字符串类型\n * packageManager: 包管理器，类型为 PackageManager，默认为 \"npm\"\n\n返回值#\n\n * Promise<void>: 安装完成的 Promise\n\n示例#\n\n\n\n\n实现细节#\n\ninstallDependencies 函数根据选择的组件库和包管理器，安装必要的依赖包。\n\n\n安装的依赖#\n\n对于每个支持的组件库，会安装以下依赖：\n\n * unplugin-auto-import - 用于自动导入 API\n * unplugin-vue-components - 用于自动导入组件\n * 选择的组件库（如 element-plus、ant-design-vue 等）\n\n\n支持的包管理器#\n\n * npm - 使用 npm install 命令\n * yarn - 使用 yarn add 命令\n * pnpm - 使用 pnpm add 命令\n\n\n组件库配置#\n\n每个组件库的配置定义在 LIBRARY_CONFIGS 对象中，包含以下信息：\n\n\n\n例如，Element Plus 的配置如下：\n\n\n\n\n源码分析#\n\n\n\n该函数使用 Node.js 的 child_process.spawn 方法执行包管理器命令，安装必要的依赖包。根据检测到的包管理器类型，使用不同的安装命令。","routePath":"/ew-auto-import-tool/api/dependency-manager","lang":"zh","toc":[{"text":"API 参考","id":"api-参考","depth":2,"charIndex":83},{"text":"installDependencies","id":"installdependencies","depth":3,"charIndex":93},{"text":"函数签名","id":"函数签名","depth":4,"charIndex":126},{"text":"参数","id":"参数","depth":4,"charIndex":135},{"text":"返回值","id":"返回值","depth":4,"charIndex":253},{"text":"示例","id":"示例","depth":4,"charIndex":292},{"text":"实现细节","id":"实现细节","depth":2,"charIndex":300},{"text":"安装的依赖","id":"安装的依赖","depth":3,"charIndex":355},{"text":"支持的包管理器","id":"支持的包管理器","depth":3,"charIndex":504},{"text":"组件库配置","id":"组件库配置","depth":3,"charIndex":593},{"text":"源码分析","id":"源码分析","depth":2,"charIndex":671}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"核心 API","content":"#\n\new-auto-import-tool 提供了一系列核心 API，可以在您的项目中以编程方式使用。以下是主要的 API 函数及其用法。\n\n\nconfigureAutoImport#\n\n主函数，用于执行自动导入配置的全过程。\n\n\n函数签名#\n\n\n\n\n参数#\n\n * library: 要配置的组件库，类型为 Library（字符串字面量类型）\n * projectPath: 项目路径，默认为当前工作目录\n\n\n返回值#\n\n * Promise<boolean>: 配置是否成功的 Promise\n\n\n示例#\n\n\n\n\n实现细节#\n\nconfigureAutoImport 函数执行以下步骤：\n\n 1. 调用 checkProject 检查项目结构\n 2. 调用 installDependencies 安装必要的依赖\n 3. 调用 updateViteConfig 更新 Vite 配置\n 4. 调用 updateTsConfig 更新 TypeScript 配置（如果项目使用 TypeScript）\n 5. 调用 generateDeclarationFiles 生成声明文件\n\n\n类型定义#\n\n\nLibrary#\n\n支持的组件库类型：\n\n\n\n\nPackageManager#\n\n支持的包管理器类型：\n\n\n\n\nProjectInfo#\n\n项目信息接口：\n\n\n\n\nLibraryConfig#\n\n组件库配置接口：\n\n\n\n\n导出的模块#\n\n除了主函数 configureAutoImport 外，该工具还导出了以下模块，可以单独使用：\n\n * checkProject: 项目检查器\n * installDependencies: 依赖管理器\n * updateViteConfig: Vite 配置管理器\n * updateTsConfig: TypeScript 配置管理器\n * generateDeclarationFiles: 声明文件生成器\n\n这些模块的详细 API 请参考各自的文档页面：\n\n * 项目检查器\n * 依赖管理器\n * Vite 配置管理器\n * TypeScript 配置管理器\n * 声明文件生成器","routePath":"/ew-auto-import-tool/api/","lang":"zh","toc":[{"text":"configureAutoImport","id":"configureautoimport","depth":2,"charIndex":72},{"text":"函数签名","id":"函数签名","depth":3,"charIndex":116},{"text":"参数","id":"参数","depth":3,"charIndex":126},{"text":"返回值","id":"返回值","depth":3,"charIndex":206},{"text":"示例","id":"示例","depth":3,"charIndex":251},{"text":"实现细节","id":"实现细节","depth":3,"charIndex":259},{"text":"类型定义","id":"类型定义","depth":2,"charIndex":493},{"text":"Library","id":"library","depth":3,"charIndex":501},{"text":"PackageManager","id":"packagemanager","depth":3,"charIndex":525},{"text":"ProjectInfo","id":"projectinfo","depth":3,"charIndex":557},{"text":"LibraryConfig","id":"libraryconfig","depth":3,"charIndex":583},{"text":"导出的模块","id":"导出的模块","depth":2,"charIndex":612}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"项目检查器 (projectChecker)","content":"#\n\n项目检查器模块用于检测项目结构，确认是否为有效的 Vue + Vite + TypeScript 项目。\n\n\nAPI 参考#\n\n\ncheckProject#\n\n检查项目结构，返回项目信息。\n\n函数签名#\n\n\n\n参数#\n\n * projectPath: 项目路径，字符串类型\n\n返回值#\n\n * Promise<ProjectInfo>: 包含项目信息的 Promise\n\n示例#\n\n\n\n\n实现细节#\n\ncheckProject 函数执行以下检查：\n\n 1. 检查 package.json 是否存在\n 2. 检查是否安装了 Vue 依赖\n 3. 检查是否使用 Vite 作为构建工具\n 4. 检查是否存在 vite.config.ts 或 vite.config.js 文件\n 5. 检查是否使用 TypeScript（是否存在 tsconfig.json 文件）\n 6. 检测使用的包管理器（npm、yarn 或 pnpm）\n\n\n返回的 ProjectInfo 对象#\n\n\n\n\n有效项目的条件#\n\n项目被认为是有效的，需要满足以下条件：\n\n * 是 Vue 项目（package.json 中包含 Vue 依赖）\n * 使用 Vite 作为构建工具（package.json 中包含 Vite 依赖）\n * 存在 vite.config.ts 或 vite.config.js 文件\n\n如果项目不满足这些条件，isValid 将被设置为 false，并且 errors 数组将包含相应的错误信息。\n\n\n源码分析#\n\n","routePath":"/ew-auto-import-tool/api/project-checker","lang":"zh","toc":[{"text":"API 参考","id":"api-参考","depth":2,"charIndex":57},{"text":"checkProject","id":"checkproject","depth":3,"charIndex":67},{"text":"函数签名","id":"函数签名","depth":4,"charIndex":98},{"text":"参数","id":"参数","depth":4,"charIndex":107},{"text":"返回值","id":"返回值","depth":4,"charIndex":140},{"text":"示例","id":"示例","depth":4,"charIndex":188},{"text":"实现细节","id":"实现细节","depth":2,"charIndex":196},{"text":"返回的 ProjectInfo 对象","id":"返回的-projectinfo-对象","depth":3,"charIndex":418},{"text":"有效项目的条件","id":"有效项目的条件","depth":3,"charIndex":442},{"text":"源码分析","id":"源码分析","depth":2,"charIndex":654}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"TypeScript 配置管理器","content":"#\n\ntsConfigManager 模块负责更新项目的 TypeScript 配置文件，添加自动导入组件和 API 的声明文件到 include 配置中，确保\nTypeScript 能够正确识别这些类型。\n\n\nAPI 参考#\n\n\nupdateTsConfig#\n\n\n\n参数#\n\n * projectPath: string - 项目根目录的路径\n\n返回值#\n\n * Promise<void> - 异步操作，成功时无返回值\n\n异常#\n\n * 当更新 TypeScript 配置失败时抛出错误\n\n使用示例#\n\n\n\n\n实现细节#\n\nupdateTsConfig 函数执行以下步骤：\n\n 1. 检查配置文件存在性：验证项目中是否存在 tsconfig.json 文件，如果不存在则跳过配置\n\n 2. 读取现有配置：读取 tsconfig.json 文件的内容\n\n 3. 检查 include 配置：如果配置中不存在 include 字段，则创建一个空数组\n\n 4. 添加声明文件引用：将 components.d.ts 和 auto-imports.d.ts 添加到 include 数组中（如果尚未包含）\n\n 5. 写入更新后的配置：如果有更改，则将更新后的配置写回 tsconfig.json 文件\n\n\n声明文件说明#\n\n模块添加的两个声明文件具有以下作用：\n\n * components.d.ts - 包含组件库中所有组件的类型声明，使 TypeScript 能够识别模板中使用的组件\n * auto-imports.d.ts - 包含组件库中所有自动导入 API 的类型声明，使 TypeScript 能够识别全局可用的 API\n\n这些文件通常由 unplugin-auto-import 和 unplugin-vue-components 插件在项目首次启动时自动生成和更新。\n\n\n配置示例#\n\n更新前的 tsconfig.json：\n\n\n\n更新后的 tsconfig.json：\n\n\n\n\n源码分析#\n\ntsConfigManager 模块使用 fs-extra 库来读取和写入 JSON 文件，这简化了配置文件的处理过程：\n\n\n\n\n注意事项#\n\n * 该函数会自动检测并跳过已经包含所需声明文件的配置\n * 如果项目中不存在 tsconfig.json 文件，函数会跳过配置而不会报错\n * 该函数仅修改 include 字段，不会更改其他 TypeScript 配置","routePath":"/ew-auto-import-tool/api/ts-config-manager","lang":"zh","toc":[{"text":"API 参考","id":"api-参考","depth":2,"charIndex":105},{"text":"updateTsConfig","id":"updatetsconfig","depth":3,"charIndex":115},{"text":"参数","id":"参数","depth":4,"charIndex":134},{"text":"返回值","id":"返回值","depth":4,"charIndex":174},{"text":"异常","id":"异常","depth":4,"charIndex":213},{"text":"使用示例","id":"使用示例","depth":4,"charIndex":247},{"text":"实现细节","id":"实现细节","depth":2,"charIndex":257},{"text":"声明文件说明","id":"声明文件说明","depth":2,"charIndex":551},{"text":"配置示例","id":"配置示例","depth":2,"charIndex":793},{"text":"源码分析","id":"源码分析","depth":2,"charIndex":847},{"text":"注意事项","id":"注意事项","depth":2,"charIndex":919}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"Vite 配置管理器","content":"#\n\nviteConfigManager 模块负责更新项目的 Vite 配置文件，添加自动导入插件的相关配置。这是实现组件库自动导入功能的核心步骤之一。\n\n\nAPI 参考#\n\n\nupdateViteConfig#\n\n\n\n参数#\n\n * library: Library - 要配置的组件库，如 'element-plus'、'ant-design-vue' 等\n * projectPath: string - 项目根目录的路径\n\n返回值#\n\n * Promise<void> - 异步操作，成功时无返回值\n\n异常#\n\n * 当项目结构无效或找不到 Vite 配置文件时抛出错误\n * 当无法在 Vite 配置中找到 plugins 数组或 defineConfig 函数时抛出错误\n\n使用示例#\n\n\n\n\n实现细节#\n\nupdateViteConfig 函数执行以下步骤：\n\n 1. 获取组件库配置：根据指定的组件库名称获取相应的配置信息\n\n 2. 检查项目结构：验证项目是否为有效的 Vue + Vite 项目，并找到 Vite 配置文件路径\n\n 3. 检查现有配置：如果 Vite 配置中已经包含自动导入插件，则跳过配置\n\n 4. 添加导入语句：在文件中添加必要的导入语句\n    \n    \n\n 5. 添加插件配置：在 plugins 数组中添加自动导入插件的配置\n    \n    \n\n 6. 写入更新后的配置：将修改后的内容写回 Vite 配置文件\n\n\n源码分析#\n\nviteConfigManager 模块使用正则表达式来定位和修改 Vite 配置文件中的关键部分：\n\n * 使用 importRegex 查找最后一个导入语句，在其后添加新的导入语句\n * 使用 pluginsRegex 查找 plugins 数组，在其中添加自动导入插件配置\n * 如果找不到 plugins 数组，则使用 defineConfigRegex 查找 defineConfig 函数，创建新的 plugins 数组\n\n这种方法允许工具在不破坏现有配置的情况下，精确地添加所需的配置项。\n\n\n注意事项#\n\n * 该函数会自动检测并跳过已经配置了自动导入插件的项目\n * 目前支持的组件库包括 Element Plus、Ant Design Vue、Naive UI 和 Vant\n * 该函数仅修改 Vite 配置文件，不会安装所需的依赖包（这由 dependencyManager 模块负责）","routePath":"/ew-auto-import-tool/api/vite-config-manager","lang":"zh","toc":[{"text":"API 参考","id":"api-参考","depth":2,"charIndex":78},{"text":"updateViteConfig","id":"updateviteconfig","depth":3,"charIndex":88},{"text":"参数","id":"参数","depth":4,"charIndex":109},{"text":"返回值","id":"返回值","depth":4,"charIndex":215},{"text":"异常","id":"异常","depth":4,"charIndex":254},{"text":"使用示例","id":"使用示例","depth":4,"charIndex":342},{"text":"实现细节","id":"实现细节","depth":2,"charIndex":352},{"text":"源码分析","id":"源码分析","depth":2,"charIndex":631},{"text":"注意事项","id":"注意事项","depth":2,"charIndex":892}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"基本示例","content":"#\n\n本页面提供了 ew-auto-import-tool 的基本使用示例，帮助您快速了解工具的使用方法和效果。\n\n\n使用前#\n\n在使用自动导入工具之前，您需要手动导入每个组件，这会导致代码冗长且难以维护。\n\n\nApp.vue (使用前)#\n\n\n\n\nvite.config.ts (使用前)#\n\n\n\n\n使用后#\n\n使用 ew-auto-import-tool 配置后，您无需手动导入组件和样式，代码更加简洁和易于维护。\n\n\nApp.vue (使用后)#\n\n\n\n\nvite.config.ts (使用后)#\n\n\n\n\n运行示例#\n\n您可以在项目的 examples 目录中找到完整的示例项目。按照以下步骤运行示例：\n\n\n\n\n示例项目结构#\n\n示例项目包含以下文件和目录：\n\n\n\n\n更多示例#\n\n查看 项目结构对比 了解更多关于配置前后项目结构的变化。","routePath":"/ew-auto-import-tool/examples/","lang":"zh","toc":[{"text":"使用前","id":"使用前","depth":2,"charIndex":58},{"text":"App.vue (使用前)","id":"appvue-使用前","depth":3,"charIndex":105},{"text":"vite.config.ts (使用前)","id":"viteconfigts-使用前","depth":3,"charIndex":124},{"text":"使用后","id":"使用后","depth":2,"charIndex":150},{"text":"App.vue (使用后)","id":"appvue-使用后","depth":3,"charIndex":211},{"text":"vite.config.ts (使用后)","id":"viteconfigts-使用后","depth":3,"charIndex":230},{"text":"运行示例","id":"运行示例","depth":2,"charIndex":256},{"text":"示例项目结构","id":"示例项目结构","depth":2,"charIndex":309},{"text":"更多示例","id":"更多示例","depth":2,"charIndex":337}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"项目结构对比","content":"#\n\n本页面展示了使用 ew-auto-import-tool 前后项目结构的变化，帮助您了解工具对项目的影响。\n\n\n配置前的项目结构#\n\n以下是一个典型的 Vue 3 + Vite 项目在使用自动导入工具之前的结构：\n\n\n\n\npackage.json (配置前)#\n\n\n\n\nvite.config.ts (配置前)#\n\n\n\n\ntsconfig.json (配置前)#\n\n\n\n\n配置后的项目结构#\n\n使用 ew-auto-import-tool 配置后，项目结构会有以下变化：\n\n\n\n\npackage.json (配置后)#\n\n\n\n\nvite.config.ts (配置后)#\n\n\n\n\ntsconfig.json (配置后)#\n\n\n\n\ncomponents.d.ts (新增)#\n\n\n\n\nauto-imports.d.ts (新增)#\n\n\n\n\n主要变化#\n\n使用 ew-auto-import-tool 后，项目有以下主要变化：\n\n 1. 新增依赖：\n    \n    * 组件库（如 Element Plus）\n    * unplugin-auto-import\n    * unplugin-vue-components\n\n 2. 配置文件更新：\n    \n    * vite.config.ts 添加了自动导入插件配置\n    * tsconfig.json 添加了声明文件引用\n\n 3. 新增文件：\n    \n    * components.d.ts - 组件类型声明文件\n    * auto-imports.d.ts - API 类型声明文件\n\n 4. 代码简化：\n    \n    * 无需手动导入组件和样式\n    * 提供完整的类型支持和代码补全\n\n这些变化使得开发更加高效，代码更加简洁，同时保持了完整的类型支持。","routePath":"/ew-auto-import-tool/examples/project-structure","lang":"zh","toc":[{"text":"配置前的项目结构","id":"配置前的项目结构","depth":2,"charIndex":58},{"text":"package.json (配置前)","id":"packagejson-配置前","depth":3,"charIndex":113},{"text":"vite.config.ts (配置前)","id":"viteconfigts-配置前","depth":3,"charIndex":137},{"text":"tsconfig.json (配置前)","id":"tsconfigjson-配置前","depth":3,"charIndex":163},{"text":"配置后的项目结构","id":"配置后的项目结构","depth":2,"charIndex":188},{"text":"package.json (配置后)","id":"packagejson-配置后","depth":3,"charIndex":242},{"text":"vite.config.ts (配置后)","id":"viteconfigts-配置后","depth":3,"charIndex":266},{"text":"tsconfig.json (配置后)","id":"tsconfigjson-配置后","depth":3,"charIndex":292},{"text":"components.d.ts (新增)","id":"componentsdts-新增","depth":3,"charIndex":317},{"text":"auto-imports.d.ts (新增)","id":"auto-importsdts-新增","depth":3,"charIndex":343},{"text":"主要变化","id":"主要变化","depth":2,"charIndex":371}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"快速开始","content":"#\n\n\n安装#\n\n\n全局安装#\n\n\n\n或者使用 yarn：\n\n\n\n或者使用 pnpm：\n\n\n\n\n直接使用 npx#\n\n也可以不安装，直接使用 npx 运行：\n\n\n\n\n基本使用#\n\n在 Vue 项目根目录下运行：\n\n\n\n工具将引导您选择组件库并自动完成配置。\n\n\n指定组件库#\n\n您可以通过命令行参数指定要配置的组件库：\n\n\n\n\n指定项目路径#\n\n默认情况下，工具会在当前目录下查找 Vue 项目。您也可以指定项目路径：\n\n\n\n\n查看帮助#\n\n\n\n\n配置完成后#\n\n配置完成后，您需要：\n\n 1. 重启开发服务器\n 2. 在组件中直接使用组件，无需手动导入\n\n例如：\n\n\n\n\n下一步#\n\n * 使用方法 - 了解更多使用选项和示例\n * 支持的组件库 - 查看支持的组件库详情\n * 实现原理 - 了解工具的实现原理","routePath":"/ew-auto-import-tool/guide/getting-started","lang":"zh","toc":[{"text":"安装","id":"安装","depth":2,"charIndex":3},{"text":"全局安装","id":"全局安装","depth":3,"charIndex":9},{"text":"直接使用 npx","id":"直接使用-npx","depth":3,"charIndex":47},{"text":"基本使用","id":"基本使用","depth":2,"charIndex":82},{"text":"指定组件库","id":"指定组件库","depth":2,"charIndex":130},{"text":"指定项目路径","id":"指定项目路径","depth":2,"charIndex":163},{"text":"查看帮助","id":"查看帮助","depth":2,"charIndex":213},{"text":"配置完成后","id":"配置完成后","depth":2,"charIndex":223},{"text":"下一步","id":"下一步","depth":2,"charIndex":286}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"实现原理","content":"#\n\new-auto-import-tool 的实现原理主要分为以下几个步骤：\n\n\n1. 项目检测#\n\n工具首先会检测项目结构，确认是否为 Vue + Vite + TypeScript 项目。具体检测内容包括：\n\n * 检查 package.json 是否存在\n * 检查是否安装了 Vue 依赖\n * 检查是否使用 Vite 作为构建工具\n * 检查是否存在 vite.config.ts 或 vite.config.js 文件\n * 检查是否使用 TypeScript（是否存在 tsconfig.json 文件）\n * 检测使用的包管理器（npm、yarn 或 pnpm）\n\n这一步由 projectChecker 模块完成，确保工具只在兼容的项目中运行。\n\n\n2. 依赖安装#\n\n确认项目结构有效后，工具会安装必要的依赖包：\n\n * unplugin-auto-import - 用于自动导入 API\n * unplugin-vue-components - 用于自动导入组件\n * 选择的组件库（如 element-plus、ant-design-vue 等）\n\n工具会根据检测到的包管理器（npm、yarn 或 pnpm）使用相应的命令安装依赖。\n\n这一步由 dependencyManager 模块完成。\n\n\n3. 配置更新#\n\n安装依赖后，工具会修改 vite.config.ts 文件，添加自动导入插件的配置：\n\n 1. 添加必要的导入语句：\n    \n    \n\n 2. 在 plugins 数组中添加插件配置：\n    \n    \n\n这一步由 viteConfigManager 模块完成。\n\n\n4. TypeScript 支持#\n\n如果项目使用 TypeScript，工具会更新 tsconfig.json 文件，添加声明文件引用：\n\n\n\n这一步由 tsConfigManager 模块完成。\n\n\n5. 文件生成#\n\n最后，工具会在项目根目录下创建两个声明文件：\n\n * components.d.ts - 组件类型声明\n * auto-imports.d.ts - API 类型声明\n\n这些文件会在项目首次启动时由 unplugin-auto-import 和 unplugin-vue-components 插件自动更新。\n\n这一步由 declarationGenerator 模块完成。\n\n\n工作流程图#\n\n\n\n\n模块职责#\n\n * projectChecker: 检查项目结构，确认是否为有效的 Vue + Vite 项目\n * dependencyManager: 安装必要的依赖包\n * viteConfigManager: 更新 Vite 配置文件，添加自动导入插件\n * tsConfigManager: 更新 TypeScript 配置文件，添加声明文件引用\n * declarationGenerator: 生成初始的声明文件\n\n\n技术实现#\n\n工具使用 Node.js 实现，主要依赖以下库：\n\n * commander: 命令行参数解析\n * inquirer: 交互式命令行界面\n * chalk: 命令行输出着色\n * ora: 命令行加载指示器\n * fs-extra: 文件系统操作的扩展\n\n通过这些库的组合使用，实现了一个简单易用的命令行工具，自动完成 Vue 项目中组件库按需导入的配置。","routePath":"/ew-auto-import-tool/guide/implementation","lang":"zh","toc":[{"text":"1. 项目检测","id":"1-项目检测","depth":2,"charIndex":41},{"text":"2. 依赖安装","id":"2-依赖安装","depth":2,"charIndex":334},{"text":"3. 配置更新","id":"3-配置更新","depth":2,"charIndex":562},{"text":"4. TypeScript 支持","id":"4-typescript-支持","depth":2,"charIndex":709},{"text":"5. 文件生成","id":"5-文件生成","depth":2,"charIndex":811},{"text":"工作流程图","id":"工作流程图","depth":2,"charIndex":1011},{"text":"模块职责","id":"模块职责","depth":2,"charIndex":1022},{"text":"技术实现","id":"技术实现","depth":2,"charIndex":1238}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"介绍","content":"#\n\n\n什么是 ew-auto-import-tool?#\n\new-auto-import-tool 是一个命令行工具，用于自动配置 Vue 项目中组件库的按需导入。它可以帮助开发者快速设置流行的组件库，如 Element\nPlus、Ant Design Vue 等，无需手动修改配置文件。\n\n\n为什么需要这个工具?#\n\n在 Vue 项目中使用组件库时，为了优化性能，通常需要配置按需导入。这涉及到以下几个步骤：\n\n 1. 安装必要的依赖包\n 2. 配置 Vite 插件\n 3. 更新 TypeScript 配置\n 4. 生成声明文件\n\n这些步骤虽然不复杂，但比较繁琐，容易出错。ew-auto-import-tool 工具可以自动完成这些配置，让开发者专注于业务逻辑的开发。\n\n\n工具特性#\n\n * 依赖管理：自动检测并安装所需依赖\n * Vite 配置：自动添加必要的导入语句和插件配置\n * TypeScript 支持：自动更新 tsconfig.json 文件\n * 声明文件：生成组件和 API 声明文件\n\n\n支持的组件库#\n\n目前，ew-auto-import-tool 支持以下组件库：\n\n * Element Plus\n * Ant Design Vue\n * Naive UI\n * Vant\n\n\n版本要求#\n\n * Node.js >= 14.0.0\n * Vue 3.x\n * Vite 2.x 或更高版本\n\n\n下一步#\n\n * 快速开始 - 了解如何安装和使用工具\n * 使用方法 - 详细的使用说明和选项\n * 支持的组件库 - 查看支持的组件库详情\n * 实现原理 - 了解工具的实现原理","routePath":"/ew-auto-import-tool/guide/","lang":"zh","toc":[{"text":"什么是 ew-auto-import-tool?","id":"什么是-ew-auto-import-tool","depth":2,"charIndex":3},{"text":"为什么需要这个工具?","id":"为什么需要这个工具","depth":2,"charIndex":147},{"text":"工具特性","id":"工具特性","depth":2,"charIndex":340},{"text":"支持的组件库","id":"支持的组件库","depth":2,"charIndex":459},{"text":"版本要求","id":"版本要求","depth":2,"charIndex":557},{"text":"下一步","id":"下一步","depth":2,"charIndex":616}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"支持的组件库","content":"#\n\new-auto-import-tool 目前支持以下流行的 Vue 组件库的自动导入配置：\n\n\nElement Plus#\n\nElement Plus 是一套基于 Vue 3 的桌面端组件库。\n\n\n配置示例#\n\n\n\n\n生成的配置#\n\n\n\n\nAnt Design Vue#\n\nAnt Design Vue 是 Ant Design 的 Vue 实现，开发和服务于企业级后台产品。\n\n\n配置示例#\n\n\n\n\n生成的配置#\n\n\n\n\nNaive UI#\n\nNaive UI 是一个 Vue 3 组件库，使用 TypeScript 编写，快速且轻量。\n\n\n配置示例#\n\n\n\n\n生成的配置#\n\n\n\n\nVant#\n\nVant 是一个轻量、可靠的移动端 Vue 组件库。\n\n\n配置示例#\n\n\n\n\n生成的配置#\n\n\n\n\n添加更多组件库支持#\n\n如果您需要支持其他组件库，可以通过以下方式贡献：\n\n 1. Fork 项目仓库\n 2. 在 src/types.ts 中添加新的组件库配置\n 3. 提交 Pull Request\n\n我们欢迎社区贡献，帮助支持更多的组件库！","routePath":"/ew-auto-import-tool/guide/supported-libraries","lang":"zh","toc":[{"text":"Element Plus","id":"element-plus","depth":2,"charIndex":50},{"text":"配置示例","id":"配置示例","depth":3,"charIndex":101},{"text":"生成的配置","id":"生成的配置","depth":3,"charIndex":111},{"text":"Ant Design Vue","id":"ant-design-vue","depth":2,"charIndex":122},{"text":"配置示例","id":"配置示例-1","depth":3,"charIndex":193},{"text":"生成的配置","id":"生成的配置-1","depth":3,"charIndex":203},{"text":"Naive UI","id":"naive-ui","depth":2,"charIndex":214},{"text":"配置示例","id":"配置示例-2","depth":3,"charIndex":274},{"text":"生成的配置","id":"生成的配置-2","depth":3,"charIndex":284},{"text":"Vant","id":"vant","depth":2,"charIndex":295},{"text":"配置示例","id":"配置示例-3","depth":3,"charIndex":331},{"text":"生成的配置","id":"生成的配置-3","depth":3,"charIndex":341},{"text":"添加更多组件库支持","id":"添加更多组件库支持","depth":2,"charIndex":352}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"使用方法","content":"#\n\n\n命令行选项#\n\new-auto-import-tool 提供了以下命令行选项：\n\n选项          简写   描述          默认值\n--library   -l   指定要配置的组件库   无（交互式选择）\n--path      -p   指定项目路径      当前目录\n--version   -v   显示版本号       -\n--help      -h   显示帮助信息      -\n\n\n交互式使用#\n\n最简单的使用方式是在 Vue 项目根目录下运行：\n\n\n\n工具将引导您完成以下步骤：\n\n 1. 选择要配置的组件库\n 2. 确认配置信息\n 3. 自动完成配置\n\n\n非交互式使用#\n\n如果您想在脚本或 CI/CD 环境中使用，可以指定所有必要的参数：\n\n\n\n\n支持的组件库#\n\n目前支持以下组件库：\n\n * element-plus - Element Plus\n * ant-design-vue - Ant Design Vue\n * naive-ui - Naive UI\n * vant - Vant\n\n\n配置示例#\n\n\nElement Plus#\n\n\n\n\nAnt Design Vue#\n\n\n\n\nNaive UI#\n\n\n\n\nVant#\n\n\n\n\n配置结果#\n\n工具成功运行后，将完成以下配置：\n\n 1. 安装必要的依赖包：\n    \n    * unplugin-auto-import\n    * unplugin-vue-components\n    * 选择的组件库\n\n 2. 更新 vite.config.ts 文件，添加自动导入插件配置\n\n 3. 更新 tsconfig.json 文件，添加声明文件引用\n\n 4. 生成 components.d.ts 和 auto-imports.d.ts 声明文件\n\n\n使用生成的配置#\n\n配置完成后，您可以在 Vue 组件中直接使用组件库的组件，无需手动导入：\n\n\n\n\n故障排除#\n\n如果配置过程中出现问题，工具会显示详细的错误信息。以下是一些常见问题及解决方法：\n\n\n未检测到 Vue 依赖#\n\n确保您的项目是基于 Vue 3 的项目，并且 package.json 中包含 Vue 依赖。\n\n\n未检测到 Vite 依赖#\n\n此工具仅支持 Vite 项目，确保您的项目使用 Vite 作为构建工具。\n\n\n未找到 vite.config.ts 或 vite.config.js 文件#\n\n确保您的项目根目录下有 vite.config.ts 或 vite.config.js 文件。\n\n\n依赖安装失败#\n\n检查网络连接，或尝试手动安装依赖包。","routePath":"/ew-auto-import-tool/guide/usage","lang":"zh","toc":[{"text":"命令行选项","id":"命令行选项","depth":2,"charIndex":3},{"text":"交互式使用","id":"交互式使用","depth":2,"charIndex":213},{"text":"非交互式使用","id":"非交互式使用","depth":2,"charIndex":302},{"text":"支持的组件库","id":"支持的组件库","depth":2,"charIndex":349},{"text":"配置示例","id":"配置示例","depth":2,"charIndex":476},{"text":"Element Plus","id":"element-plus","depth":3,"charIndex":484},{"text":"Ant Design Vue","id":"ant-design-vue","depth":3,"charIndex":502},{"text":"Naive UI","id":"naive-ui","depth":3,"charIndex":522},{"text":"Vant","id":"vant","depth":3,"charIndex":536},{"text":"配置结果","id":"配置结果","depth":2,"charIndex":546},{"text":"使用生成的配置","id":"使用生成的配置","depth":2,"charIndex":782},{"text":"故障排除","id":"故障排除","depth":2,"charIndex":833},{"text":"未检测到 Vue 依赖","id":"未检测到-vue-依赖","depth":3,"charIndex":883},{"text":"未检测到 Vite 依赖","id":"未检测到-vite-依赖","depth":3,"charIndex":947},{"text":"未找到 vite.config.ts 或 vite.config.js 文件","id":"未找到-viteconfigts-或-viteconfigjs-文件","depth":3,"charIndex":1001},{"text":"依赖安装失败","id":"依赖安装失败","depth":3,"charIndex":1092}],"domain":"","frontmatter":{},"version":""}]